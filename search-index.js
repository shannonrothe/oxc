var searchIndex = JSON.parse('{\
"oxc_allocator":{"doc":"","t":[3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Allocator","Box","String","Vec","add","add_assign","as_bytes","as_mut_str","as_mut_vec","as_ref","as_ref","as_str","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bump","capacity","clear","clone","clone_from","clone_into","cmp","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","drain","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend","extend","extend","extend","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_iter_in","from_iter_in","from_iter_in","from_raw_parts_in","from_str_in","from_utf16_in","from_utf8","from_utf8_lossy_in","from_utf8_unchecked","hash","hash","hash","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","insert","insert_str","into","into","into","into","into_bump_str","into_bytes","into_inner","into_iter","into_iter","is_empty","is_empty","len","new_in","new_in","partial_cmp","pop","push","push_str","remove","replace_range","reserve","reserve_exact","retain","serialize","serialize","shrink_to_fit","split_off","to_owned","to_string","truncate","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unbox","with_capacity_in","with_capacity_in","write_char","write_str"],"q":["oxc_allocator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Bumpalo Box","A UTF-8 encoded, growable string.","Bumpalo Vec","","","Returns a byte slice of this <code>String</code>’s contents.","Converts a <code>String</code> into a mutable string slice.","Returns a mutable reference to the contents of this <code>String</code>.","","","Extracts a string slice containing the entire <code>String</code>.","","","","","","","","","","","Returns a shared reference to the allocator backing this …","Returns this <code>String</code>’s capacity, in bytes.","Truncates this <code>String</code>, removing all contents.","","","","","","","","","","","","","Creates a draining iterator that removes the specified …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Construct a new <code>String&lt;&#39;bump&gt;</code> from an iterator of <code>char</code>s.","","Creates a new <code>String</code> from a length, capacity, and pointer.","Construct a new <code>String&lt;&#39;bump&gt;</code> from a string slice.","Decode a UTF-16 encoded slice <code>v</code> into a <code>String</code>, returning …","Converts a vector of bytes to a <code>String</code>.","Converts a slice of bytes to a string, including invalid …","Converts a vector of bytes to a <code>String</code> without checking …","","","","","","","","","","","","","","","","Inserts a character into this <code>String</code> at a byte position.","Inserts a string slice into this <code>String</code> at a byte position.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert this <code>String&lt;&#39;bump&gt;</code> into a <code>&amp;&#39;bump str</code>. This is …","Converts a <code>String</code> into a byte vector.","","","","","Returns <code>true</code> if this <code>String</code> has a length of zero.","Returns the length of this <code>String</code>, in bytes.","","Creates a new empty <code>String</code>.","","Removes the last character from the string buffer and …","Appends the given <code>char</code> to the end of this <code>String</code>.","Appends a given string slice onto the end of this <code>String</code>.","Removes a <code>char</code> from this <code>String</code> at a byte position and …","Removes the specified range in the string, and replaces it …","Ensures that this <code>String</code>’s capacity is at least …","Ensures that this <code>String</code>’s capacity is <code>additional</code> bytes …","Retains only the characters specified by the predicate.","","","Shrinks the capacity of this <code>String</code> to match its length.","Splits the string into two at the given index.","","","Shortens this <code>String</code> to the specified length.","","","","","","","","","","","","","","","Creates a new empty <code>String</code> with a particular capacity.","",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,9,10,7,1,1,9,10,7,1,1,1,1,1,1,1,1,1,7,9,10,7,1,9,10,1,1,9,10,1,1,1,1,1,1,1,1,1,1,1,9,10,7,1,1,9,10,7,1,10,1,1,1,1,1,1,1,1,9,10,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,10,7,1,1,1,10,10,10,10,1,1,10,1,1,1,1,1,1,1,1,1,1,9,10,1,1,1,1,1,9,10,7,1,9,10,7,1,9,10,7,1,9,10,1,1,1],"f":[0,0,0,0,[[1,2],1],[[1,2]],[1],[1,2],[1,3],[1],[1,2],[1,2],[[]],[[]],[[]],[[]],[1,2],[[]],[[]],[[]],[1,2],[[]],[1,4],[1,5],[1],[1,1],[[1,1]],[[]],[[1,1],6],[[],7],[[[9,[8]]]],[10],[7],[1,2],[[[9,[8]]]],[10,3],[1,2],[1,11],[[9,9],12],[[[10,[13]],10],12],[[1,2],12],[[1,14],12],[[1,2],12],[[1,15],12],[[1,1],12],[1],[1],[1],[1],[1],[1],[[[9,[[0,[8,16]]]],17],18],[[[10,[16]],17],18],[[7,17],18],[[1,17],[[20,[19]]]],[[1,17],[[20,[19]]]],[[]],[[]],[[]],[[]],[[21,7],10],[4,1],[[],1],[[22,5,5,4],1],[[2,4],1],[4,[[20,[1,23]]]],[[[3,[22]]],[[20,[1,24]]]],[4,1],[[[3,[22]]],1],[[[9,[25]]]],[[[10,[25]]]],[1],[[1,[26,[5]]],2],[[1,27],2],[[1,[28,[5]]],2],[[1,[29,[5]]],2],[[1,[30,[5]]],2],[[1,[31,[5]]],2],[[1,[26,[5]]],2],[[1,[31,[5]]],2],[[1,[29,[5]]],2],[[1,[28,[5]]],2],[[1,[30,[5]]],2],[[1,27],2],[[1,5,32]],[[1,5,2]],[[]],[[]],[[]],[[]],[1,2],[1,[[3,[22]]]],[10,3],[10],[10],[10,12],[1,12],[1,5],[7,10],[4,1],[[1,1],[[33,[6]]]],[1,[[33,[32]]]],[[1,32]],[[1,2]],[[1,5],32],[[1,2]],[[1,5]],[[1,5]],[1],[9,20],[10,20],[1],[[1,5],1],[[]],[[],14],[[1,5]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],34],[[],34],[[],34],[[],34],[9],[[5,7],10],[[5,4],1],[[1,32],[[20,[19]]]],[[1,2],[[20,[19]]]]],"p":[[3,"String"],[15,"str"],[3,"Vec"],[3,"Bump"],[15,"usize"],[4,"Ordering"],[3,"Allocator"],[8,"Sized"],[3,"Box"],[3,"Vec"],[3,"Drain"],[15,"bool"],[8,"PartialEq"],[3,"String"],[4,"Cow"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Result"],[8,"IntoIterator"],[15,"u8"],[3,"FromUtf16Error"],[3,"FromUtf8Error"],[8,"Hash"],[3,"RangeInclusive"],[3,"RangeFull"],[3,"RangeTo"],[3,"RangeFrom"],[3,"Range"],[3,"RangeToInclusive"],[15,"char"],[4,"Option"],[3,"TypeId"]]},\
"oxc_ast":{"doc":"AST NOTE: This is not compatible with estree.","tn":["AstKind","Atom","BigUint","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","assign_from_slice","ast","ast_builder","ast_kind","average_ceil","average_floor","bit","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bits","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow_mut","cbrt","cbrt","checked_add","checked_div","checked_mul","checked_sub","clone","clone_from","clone_into","cmp","context","count_ones","default","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_ceil","div_floor","div_mod_floor","div_rem","divides","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bytes_be","from_bytes_le","from_f64","from_i128","from_i64","from_radix_be","from_radix_le","from_slice","from_str","from_str_radix","from_u128","from_u64","gcd","gcd_lcm","hash","into","is_even","is_multiple_of","is_odd","is_one","is_zero","iter_u32_digits","iter_u64_digits","lcm","mod_floor","modpow","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","new","next_multiple_of","nth_root","nth_root","one","parse_bytes","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","prev_multiple_of","product","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","set_bit","set_one","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","source_type","span","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","syntax_directed_operations","to_bigint","to_biguint","to_bytes_be","to_bytes_le","to_compact_string","to_f32","to_f64","to_i128","to_i64","to_owned","to_radix_be","to_radix_le","to_str_radix","to_string","to_u128","to_u32_digits","to_u64","to_u64_digits","trailing_ones","trailing_zeros","trivia","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","type_id","visit","zero","AccessorProperty","AccessorProperty","Addition","Addition","And","Argument","ArrayAssignmentTarget","ArrayAssignmentTarget","ArrayExpression","ArrayExpression","ArrayPattern","ArrayPattern","ArrowExpression","ArrowFormalParameters","ArrowFunctionExpression","Assign","AssignmentExpression","AssignmentExpression","AssignmentOperator","AssignmentOperator","AssignmentPattern","AssignmentPattern","AssignmentTarget","AssignmentTarget","AssignmentTarget","AssignmentTargetIdentifier","AssignmentTargetMaybeDefault","AssignmentTargetPattern","AssignmentTargetPattern","AssignmentTargetProperty","AssignmentTargetPropertyIdentifier","AssignmentTargetPropertyIdentifier","AssignmentTargetPropertyProperty","AssignmentTargetPropertyProperty","AssignmentTargetWithDefault","AssignmentTargetWithDefault","Attribute","AwaitExpression","AwaitExpression","BigintLiteral","BigintLiteral","BigintLiteral","Binary","BinaryExpression","BinaryExpression","BinaryOperator","BinaryOperator","BindingIdentifier","BindingIdentifier","BindingPattern","BindingPatternKind","BitwiseAnd","BitwiseAnd","BitwiseNot","BitwiseOR","BitwiseOR","BitwiseXOR","BitwiseXOR","BlockStatement","BlockStatement","BooleanLiteral","BooleanLiteral","BooleanLiteral","BreakStatement","BreakStatement","CallExpression","CallExpression","CallExpression","CatchClause","ChainElement","ChainExpression","ChainExpression","Class","ClassBody","ClassDeclaration","ClassDeclaration","ClassDeclaration","ClassElement","ClassExpression","ClassExpression","ClassType","Coalesce","ComputedMemberExpression","ComputedMemberExpression","ComputedPropertyName","ConditionalExpression","ConditionalExpression","Const","Constructor","ContinueStatement","ContinueStatement","D","DebuggerStatement","DebuggerStatement","Decimal","Declaration","Declaration","Decorator","Decrement","Delete","Directive","Division","Division","DoWhileStatement","DoWhileStatement","Element","Element","EmptyExpression","EmptyObject","EmptyStatement","EmptyStatement","Equality","Exponential","Exponential","ExportAllDeclaration","ExportAllDeclaration","ExportDefaultDeclaration","ExportDefaultDeclaration","ExportDefaultDeclarationKind","ExportNamedDeclaration","ExportNamedDeclaration","ExportSpecifier","Expression","Expression","Expression","Expression","Expression","Expression","Expression","ExpressionContainer","ExpressionContainer","ExpressionStatement","ExpressionStatement","ExternalModuleReference","ForInStatement","ForInStatement","ForOfStatement","ForOfStatement","ForStatement","ForStatement","ForStatementInit","ForStatementLeft","FormalParameter","FormalParameter","FormalParameterKind","FormalParameters","Fragment","Fragment","Function","FunctionBody","FunctionDeclaration","FunctionDeclaration","FunctionDeclaration","FunctionExpression","FunctionExpression","FunctionType","G","Get","Get","Get","GreaterEqualThan","GreaterThan","Hex","I","Identifier","Identifier","Identifier","Identifier","Identifier","Identifier","Identifier","Identifier","Identifier","Identifier","IdentifierName","IdentifierName","IdentifierReference","IfStatement","IfStatement","ImportAttribute","ImportAttributeKey","ImportDeclaration","ImportDeclaration","ImportDeclarationSpecifier","ImportDefaultSpecifier","ImportDefaultSpecifier","ImportExpression","ImportExpression","ImportNamespaceSpecifier","ImportNamespaceSpecifier","ImportOrExportKind","ImportSpecifier","ImportSpecifier","In","Increment","Inequality","Init","Instanceof","JSDocNullableType","JSDocNullableType","JSDocUnknownType","JSDocUnknownType","JSXAttribute","JSXAttributeItem","JSXAttributeName","JSXAttributeValue","JSXChild","JSXClosingElement","JSXClosingFragment","JSXElement","JSXElement","JSXElementName","JSXEmptyExpression","JSXExpression","JSXExpressionContainer","JSXFragment","JSXFragment","JSXIdentifier","JSXMemberExpression","JSXMemberExpressionObject","JSXNamespacedName","JSXOpeningElement","JSXOpeningFragment","JSXSpreadAttribute","JSXSpreadChild","JSXText","Keyof","LabelIdentifier","LabeledStatement","LabeledStatement","LessEqualThan","LessThan","Let","LogicalAnd","LogicalExpression","LogicalExpression","LogicalNot","LogicalNullish","LogicalOperator","LogicalOperator","LogicalOr","M","MemberAssignmentTarget","MemberExpression","MemberExpression","MemberExpression","MemberExpression","MemberExpression","MetaProperty","MetaProperty","Method","Method","MethodDefinition","MethodDefinition","MethodDefinitionKind","Minus","ModuleDeclaration","ModuleDeclaration","ModuleDeclarationKind","ModuleExportName","Multiplication","Multiplication","NamespacedName","NamespacedName","NewExpression","NewExpression","None","NullLiteral","NullLiteral","NullLiteral","NumberBase","NumberLiteral","NumberLiteral","NumberLiteral","NumberLiteral","ObjectAssignmentTarget","ObjectAssignmentTarget","ObjectExpression","ObjectExpression","ObjectPattern","ObjectPattern","ObjectPatternProperty","ObjectProperty","Octal","Operator","Or","ParenthesizedExpression","ParenthesizedExpression","Pattern","Plus","Private","PrivateFieldExpression","PrivateFieldExpression","PrivateIdentifier","PrivateIdentifier","PrivateInExpression","PrivateInExpression","Program","Property","Property","Property","PropertyDefinition","PropertyDefinition","PropertyKey","PropertyKind","PropertyValue","Protected","Public","QualifiedName","Readonly","RegExp","RegExpFlags","RegExpLiteral","RegExpLiteral","RegExpLiteral","Remainder","Remainder","RestElement","RestElement","RestElement","ReturnStatement","ReturnStatement","S","SequenceExpression","SequenceExpression","Set","Set","Set","ShiftLeft","ShiftLeft","ShiftRight","ShiftRight","ShiftRightZeroFill","ShiftRightZeroFill","Signature","SimpleAssignmentTarget","SimpleAssignmentTarget","Spread","SpreadAttribute","SpreadElement","SpreadElement","SpreadProperty","Statement","StaticBlock","StaticBlock","StaticMemberExpression","StaticMemberExpression","StrictEquality","StrictInequality","StringLiteral","StringLiteral","StringLiteral","StringLiteral","StringLiteral","StringLiteral","StringLiteral","StringLiteral","Subtraction","Subtraction","Super","Super","SwitchCase","SwitchStatement","SwitchStatement","TSAbstractMethodDefinition","TSAbstractMethodDefinition","TSAbstractPropertyDefinition","TSAbstractPropertyDefinition","TSAccessibility","TSAnyKeyword","TSAnyKeyword","TSArrayType","TSArrayType","TSAsExpression","TSAsExpression","TSAsExpression","TSBigIntKeyword","TSBigIntKeyword","TSBooleanKeyword","TSBooleanKeyword","TSCallSignatureDeclaration","TSCallSignatureDeclaration","TSClassImplements","TSConditionalType","TSConditionalType","TSConstructSignatureDeclaration","TSConstructSignatureDeclaration","TSConstructorType","TSConstructorType","TSDeclareFunction","TSEnumDeclaration","TSEnumDeclaration","TSEnumDeclaration","TSEnumMember","TSEnumMemberName","TSExportAssignment","TSExportAssignment","TSExternalModuleReference","TSFunctionType","TSFunctionType","TSImportEqualsDeclaration","TSImportEqualsDeclaration","TSImportType","TSImportType","TSIndexSignature","TSIndexSignature","TSIndexSignature","TSIndexSignatureName","TSIndexedAccessType","TSIndexedAccessType","TSInferType","TSInferType","TSInstantiationExpression","TSInstantiationExpression","TSInterfaceBody","TSInterfaceDeclaration","TSInterfaceDeclaration","TSInterfaceDeclaration","TSInterfaceHeritage","TSIntersectionType","TSIntersectionType","TSLiteral","TSLiteralType","TSLiteralType","TSMappedType","TSMappedType","TSMappedTypeModifierOperator","TSMethodSignature","TSMethodSignature","TSMethodSignatureKind","TSModuleBlock","TSModuleBlock","TSModuleDeclaration","TSModuleDeclaration","TSModuleDeclaration","TSModuleDeclarationBody","TSModuleDeclarationName","TSModuleReference","TSNamedTupleMember","TSNamedTupleMember","TSNamespaceExportDeclaration","TSNamespaceExportDeclaration","TSNeverKeyword","TSNeverKeyword","TSNonNullExpression","TSNonNullExpression","TSNonNullExpression","TSNullKeyword","TSNullKeyword","TSNumberKeyword","TSNumberKeyword","TSObjectKeyword","TSObjectKeyword","TSOptionalType","TSOptionalType","TSPropertySignature","TSPropertySignature","TSQualifiedName","TSQualifiedName","TSRestType","TSRestType","TSSignature","TSStringKeyword","TSStringKeyword","TSSymbolKeyword","TSSymbolKeyword","TSTemplateLiteralType","TSTemplateLiteralType","TSThisKeyword","TSThisKeyword","TSTupleElement","TSTupleType","TSTupleType","TSType","TSType","TSTypeAliasDeclaration","TSTypeAliasDeclaration","TSTypeAnnotation","TSTypeAssertion","TSTypeAssertion","TSTypeAssertion","TSTypeLiteral","TSTypeLiteral","TSTypeName","TSTypeOperator","TSTypeOperatorType","TSTypeOperatorType","TSTypeParameter","TSTypeParameterDeclaration","TSTypeParameterInstantiation","TSTypePredicate","TSTypePredicate","TSTypePredicateName","TSTypeQuery","TSTypeQuery","TSTypeReference","TSTypeReference","TSUndefinedKeyword","TSUndefinedKeyword","TSUnionType","TSUnionType","TSUnknownKeyword","TSUnknownKeyword","TSVoidKeyword","TSVoidKeyword","TaggedTemplateExpression","TaggedTemplateExpression","TemplateElement","TemplateElementValue","TemplateLiteral","TemplateLiteral","TemplateLiteral","Text","This","ThisExpression","ThisExpression","ThrowStatement","ThrowStatement","True","TryStatement","TryStatement","Type","TypeName","Typeof","U","UnaryExpression","UnaryExpression","UnaryExpression","UnaryNegation","UnaryOperator","UnaryOperator","UnaryPlus","Unique","UniqueFormalParameters","UpdateExpression","UpdateExpression","UpdateOperator","UpdateOperator","V","Value","Var","VariableDeclaration","VariableDeclaration","VariableDeclaration","VariableDeclaration","VariableDeclarationKind","VariableDeclarator","Void","WhileStatement","WhileStatement","WithStatement","WithStatement","Y","YieldExpression","YieldExpression","abstract","abstract","accessibility","accessibility","accessibility","all","alternate","alternate","argument","argument","argument","argument","argument","argument","argument","argument","argument","arguments","arguments","arguments","as_atom","as_str","as_str","as_str","as_str","as_str","as_str","assertions","assertions","asserts","async","async","attributes","await","base","binding","binding","binding","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","block","body","body","body","body","body","body","body","body","body","body","body","body","body","body","body","body","body","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bound_name","bound_name","bound_names","bound_names","bound_names","bound_names","bound_names","bound_names","bound_names","bound_names","bound_names","bound_names","bound_names","bound_names","bound_names","bound_names","bound_names","callee","callee","cases","check_type","children","children","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","closing_element","closing_fragment","cmp","common_js_require","complement","computed","computed","computed","computed","computed","computed","computed","consequent","consequent","consequent","const","constraint","contains","cooked","declaration","declaration","declarations","declare","declare","declare","declare","declare","declare","declare","decorators","decorators","decorators","decorators","default","definite","definite","delegate","difference","directive","directives","directives","discriminant","element_type","element_type","element_types","elements","elements","elements","empty","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","export_kind","export_kind","exported","exported","exported","expr_name","expression","expression","expression","expression","expression","expression","expression","expression","expression","expression","expression","expression","expression","expression","expression","expression","expression","expression","expressions","expressions","extend","extends","extends_type","false_type","field","finalizer","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_src","generator","generator","get_expression","get_first_name","get_identifier_reference","get_inner_expression","get_object_identifier","handler","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","id","id","id","id","id","id","id","id","id","id","implements","import_kind","import_kind","imported","in","index_type","init","init","init","init","initializer","insert","intersection","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_all","is_arithmetic","is_arithmetic","is_arithmetic","is_bitwise","is_bitwise","is_bitwise","is_compare","is_const","is_const","is_const_type_reference","is_declaration","is_declaration","is_destructuring_pattern","is_destructuring_pattern","is_empty","is_empty","is_empty","is_empty","is_equality","is_export","is_export","is_expression","is_expression","is_false","is_function_declaration","is_identifier","is_keyword","is_keyword","is_lexical","is_literal_expression","is_logical_operator","is_no_substitution_template","is_null","is_numeric_or_string_binary_operator","is_primary_expression","is_private_identifier","is_qualified_name","is_relational","is_require_call","is_rest_element","is_simple_parameter_list","is_specific_id","is_string_literal","is_string_well_formed_unicode","is_symbol_or_symbol_for_call","is_ts_declare_function","is_type","is_type_of","is_typescript_syntax","is_typescript_syntax","is_typescript_syntax","is_typescript_syntax","is_undefined","is_value","items","key","key","key","key","key","key","key","kind","kind","kind","kind","kind","kind","kind","kind","label","label","label","label","left","left","left","left","left","left","left","left","literal","local","local","local","local","members","members","meta","method","method_definition","method_definition_kind","module_reference","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name_type","namespace","new","not","object","object","object","object","object","object","object_type","opening_element","opening_fragment","operator","operator","operator","operator","operator","operator","operator","operator","optional","optional","optional","optional","optional","optional","optional","optional","optional","optional","optional","optional","out","override","override","param","parameter","parameter_name","parameters","params","params","params","params","params","params","params","params","params","partial_cmp","pattern","pattern","postfix","prefix","prefix","private_bound_identifiers","private_bound_identifiers","private_bound_identifiers","private_bound_identifiers","prop_name","prop_name","prop_name","prop_name","prop_name","prop_name","properties","properties","properties","property","property","property","property","property_definition","property_key","qualifier","quasi","quasi","quasis","quasis","raw","raw","readonly","readonly","readonly","readonly","regex","remove","rest","rest","return_type","return_type","return_type","return_type","return_type","return_type","return_type","right","right","right","right","right","right","right","right","self_closing","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set","shorthand","source","source","source","source","source_type","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","specifiers","specifiers","statements","static","static","static","static","static_name","static_name","static_property_name","sub","sub_assign","super_class","super_type_parameters","symmetric_difference","tag","tail","test","test","test","test","test","test","to_compact_string","to_compact_string","to_compact_string","to_compact_string","to_compact_string","to_compact_string","to_compact_string","to_compact_string","to_compact_string","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_precision","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","toggle","trailing_comma","trailing_comma","trailing_comma","true_type","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type","type","type_annotation","type_annotation","type_annotation","type_annotation","type_annotation","type_annotation","type_annotation","type_annotation","type_annotation","type_annotation","type_annotation","type_annotation","type_annotation","type_annotation","type_annotation","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_name","type_parameter","type_parameter","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","type_parameters","types","types","types","union","update","value","value","value","value","value","value","value","value","value","value","value","value","value","without_parenthesized","AstBuilder","accessor_property","alloc","allocator","array_expression","array_pattern","arrow_expression","assignment_expression","assignment_pattern","await_expression","binary_expression","binding_identifier","binding_pattern","block","block_statement","borrow","borrow_mut","break_statement","call_expression","catch_clause","chain_expression","class","class_declaration","class_expression","computed_member_expression","conditional_expression","continue_statement","debugger_statement","decorator","directive","do_while_statement","empty_statement","export_all_declaration","export_default_declaration","export_named_declaration","expression_statement","for_in_statement","for_of_statement","for_statement","formal_parameter","formal_parameters","from","function","function_body","function_declaration","function_expression","identifier_expression","if_statement","import_declaration","import_expression","into","js_doc_nullable_type","js_doc_unknown_type","jsx_attribute","jsx_closing_element","jsx_closing_fragment","jsx_element","jsx_empty_expression","jsx_expression_container","jsx_fragment","jsx_identifier","jsx_member_expression","jsx_namespaced_name","jsx_opening_element","jsx_opening_fragment","jsx_spread_attribute","jsx_spread_child","jsx_text","labeled_statement","literal_bigint_expression","literal_boolean_expression","literal_null_expression","literal_number_expression","literal_regexp_expression","literal_string_expression","logical_expression","meta_property","module_declaration","new","new_expression","new_str","new_vec","new_vec_single","new_vec_with_capacity","object_expression","object_pattern","parenthesized_expression","private_field_expression","program","property","rest_element","rest_element_pattern","return_statement","sequence_expression","spread_element","static_block","static_member_expression","super_","switch_case","switch_statement","tagged_template_expression","template_literal_expression","this_expression","throw_statement","try_from","try_into","try_statement","ts_any_keyword","ts_array_type","ts_bigint_keyword","ts_boolean_keyword","ts_call_signature_declaration","ts_conditional_type","ts_construct_signature_declaration","ts_constructor_type","ts_enum_declaration","ts_function_type","ts_import_equals_declaration","ts_import_type","ts_index_signature","ts_indexed_access_type","ts_infer_type","ts_interface_body","ts_interface_declaration","ts_interface_heritages","ts_intersection_type","ts_literal_type","ts_mapped_type","ts_method_signature","ts_module_block","ts_module_declaration","ts_never_keyword","ts_non_null_expression","ts_null_keyword","ts_number_keyword","ts_object_keyword","ts_property_signature","ts_string_keyword","ts_symbol_keyword","ts_template_literal_type","ts_this_keyword","ts_tuple_type","ts_type_alias_declaration","ts_type_annotation","ts_type_arguments","ts_type_assertion","ts_type_implement","ts_type_literal","ts_type_operator_type","ts_type_parameter","ts_type_parameters","ts_type_predicate","ts_type_query_type","ts_type_reference","ts_undefined_keyword","ts_union_type","ts_unknown_keyword","ts_void_keyword","type_id","unary_expression","update_expression","variable_declaration","variable_declarator","while_statement","with_statement","yield_expression","Argument","ArrayExpression","ArrayPattern","ArrowExpression","AssignmentExpression","AssignmentPattern","AssignmentTarget","AssignmentTargetWithDefault","AstKind","AwaitExpression","BigintLiteral","BinaryExpression","BindingIdentifier","BlockStatement","BooleanLiteral","BreakStatement","CallExpression","CatchClause","Class","ClassHeritage","ConditionalExpression","ContinueStatement","DebuggerStatement","Decorator","Directive","DoWhileStatement","EmptyStatement","ExpressionStatement","FinallyClause","ForInStatement","ForOfStatement","ForStatement","ForStatementInit","FormalParameter","FormalParameters","Function","FunctionBody","IdentifierName","IdentifierReference","IfStatement","JSXElementName","JSXOpeningElement","LabelIdentifier","LabeledStatement","LogicalExpression","MemberExpression","MetaProperty","MethodDefinition","ModuleDeclaration","NewExpression","NullLiteral","NumberLiteral","ObjectExpression","ObjectPattern","ParenthesizedExpression","PrivateIdentifier","Program","Property","PropertyDefinition","PropertyKey","PropertyValue","RegExpLiteral","RestElement","ReturnStatement","Root","SequenceExpression","SimpleAssignmentTarget","SpreadElement","StaticBlock","StringLiteral","Super","SwitchCase","SwitchStatement","TSAnyKeyword","TSAsExpression","TSEnumDeclaration","TSEnumMember","TSImportEqualsDeclaration","TSIndexedAccessType","TSInterfaceDeclaration","TSIntersectionType","TSLiteralType","TSMethodSignature","TSModuleBlock","TSModuleDeclaration","TSNonNullExpression","TSNullKeyword","TSPropertySignature","TSTypeAliasDeclaration","TSTypeAnnotation","TSTypeAssertion","TSTypeLiteral","TSTypeParameter","TSTypeParameterDeclaration","TSTypeParameterInstantiation","TSTypeReference","TSUnionType","TSVoidKeyword","TaggedTemplateExpression","TemplateLiteral","ThisExpression","ThrowStatement","TryStatement","UnaryExpression","UpdateExpression","VariableDeclaration","VariableDeclarator","WhileStatement","WithStatement","YieldExpression","borrow","borrow_mut","clone","clone_into","eq","fmt","from","identifier_name","into","is_declaration","is_function_like","is_identifier","is_iteration_statement","is_jsx","is_literal","is_statement","is_type","span","to_owned","try_from","try_into","type_id","Ambient","Await","Context","Decorator","DisallowConditionalTypes","Do","For","If","In","Label","Return","StatementContext","StatementList","While","With","Yield","all","and_ambient","and_await","and_decorator","and_disallow_conditional_types","and_in","and_return","and_yield","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","contains","default","difference","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","has_ambient","has_await","has_decorator","has_disallow_conditional_types","has_in","has_return","has_yield","hash","insert","intersection","intersects","into","into","is_all","is_empty","is_iteration","is_single_statement","is_statement_list","not","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","union_await_if","union_yield_if","JavaScript","Jsx","Language","LanguageVariant","Module","ModuleKind","Script","SourceType","SourceTypeBuilder","SourceTypeError","Standard","TypeScript","UnkownExtension","VALID_EXTENSIONS","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","builder","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default_context","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_path","hash","hash","hash","hash","into","into","into","into","into","into","is_javascript","is_jsx","is_module","is_script","is_typescript","is_typescript_definition","jsx","module","module_kind","provide","script","set_jsx","set_module","set_script","set_typescript","set_typescript_definition","to_compact_string","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","typescript","typescript_definition","is_definition_file","GetSpan","Span","borrow","borrow_mut","clone","clone_into","default","end","eq","fmt","from","hash","into","is_empty","len","new","serialize","span","start","to_owned","try_from","try_into","type_id","BoundName","BoundNames","IsSimpleParameterList","PrivateBoundIdentifiers","PropName","bound_name","bound_names","is_simple_parameter_list","private_bound_identifiers","prop_name","Comment","CommentKind","MultiLine","SingleLine","Trivias","add_comment","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","from","from","from","has_comments_between","into","into","into","new","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Visit","enter_node","enter_object_expression","leave_node","visit_argument","visit_array_assignment_target","visit_array_expression","visit_array_pattern","visit_arrow_expression","visit_assignment_expression","visit_assignment_pattern","visit_assignment_target","visit_assignment_target_maybe_default","visit_assignment_target_pattern","visit_assignment_target_property","visit_assignment_target_property_identifier","visit_assignment_target_property_property","visit_assignment_target_with_default","visit_await_expression","visit_bigint_literal","visit_binary_expression","visit_binding_identifier","visit_block_statement","visit_boolean_literal","visit_break_statement","visit_call_expression","visit_catch_clause","visit_chain_element","visit_chain_expression","visit_class","visit_class_body","visit_class_element","visit_class_heritage","visit_computed_member_expression","visit_conditional_expression","visit_continue_statement","visit_debugger_statement","visit_declaration","visit_decorator","visit_directive","visit_do_while_statement","visit_empty_statement","visit_enum","visit_enum_member","visit_export_all_declaration","visit_export_default_declaration","visit_export_named_declaration","visit_expression","visit_expression_match","visit_expression_statement","visit_finally_clause","visit_for_in_statement","visit_for_of_statement","visit_for_statement","visit_for_statement_init","visit_for_statement_left","visit_formal_parameter","visit_formal_parameters","visit_function","visit_function_body","visit_identifier_name","visit_identifier_reference","visit_if_statement","visit_import_declaration","visit_import_declaration_specifier","visit_import_default_specifier","visit_import_expression","visit_import_name_specifier","visit_import_specifier","visit_jsx_attribute","visit_jsx_attribute_item","visit_jsx_attribute_value","visit_jsx_child","visit_jsx_element","visit_jsx_element_name","visit_jsx_expression","visit_jsx_expression_container","visit_jsx_fragment","visit_jsx_opening_element","visit_jsx_spread_attribute","visit_jsx_spread_child","visit_label_identifier","visit_labeled_statement","visit_logical_expression","visit_member_expression","visit_meta_property","visit_method_definition","visit_module_declaration","visit_new_expression","visit_null_literal","visit_number_literal","visit_object_assignment_target","visit_object_expression","visit_object_pattern","visit_object_pattern_property","visit_object_property","visit_parenthesized_expression","visit_pattern","visit_private_field_expression","visit_private_identifier","visit_private_in_expression","visit_program","visit_property","visit_property_definition","visit_property_key","visit_property_value","visit_reg_expr_literal","visit_rest_element","visit_return_statement","visit_sequence_expression","visit_simple_assignment_target","visit_spread_element","visit_statement","visit_statement_match","visit_statements","visit_static_block","visit_static_member_expression","visit_string_literal","visit_super","visit_switch_case","visit_switch_statement","visit_tagged_template_expression","visit_template_element","visit_template_literal","visit_this_expression","visit_throw_statement","visit_try_statement","visit_ts_any_keyword","visit_ts_array_type","visit_ts_as_expression","visit_ts_call_signature_declaration","visit_ts_conditional_type","visit_ts_construct_signature_declaration","visit_ts_constructor_type","visit_ts_function_type","visit_ts_import_equals_declaration","visit_ts_index_signature","visit_ts_index_signature_name","visit_ts_indexed_access_type","visit_ts_instantiation_expression","visit_ts_interface_declaration","visit_ts_intersection_type","visit_ts_literal_type","visit_ts_mapped_type","visit_ts_method_signature","visit_ts_module_block","visit_ts_module_declaration","visit_ts_non_null_expression","visit_ts_null_keyword","visit_ts_property_signature","visit_ts_signature","visit_ts_tuple_element","visit_ts_tuple_type","visit_ts_type","visit_ts_type_alias_declaration","visit_ts_type_annotation","visit_ts_type_assertion","visit_ts_type_literal","visit_ts_type_name","visit_ts_type_operator_type","visit_ts_type_parameter","visit_ts_type_parameter_declaration","visit_ts_type_parameter_instantiation","visit_ts_type_predicate","visit_ts_type_reference","visit_ts_union_type","visit_ts_void_keyword","visit_unary_expression","visit_update_expression","visit_variable_declaration","visit_variable_declarator","visit_while_statement","visit_with_statement","visit_yield_expression"],"q":["oxc_astoxc_ast::astoxc_ast::ast_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oxc_ast::ast_kind","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oxc_ast::context","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oxc_ast::source_type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oxc_ast::source_type::Language","oxc_ast::span","","","","","","","","","","","","","","","","","","","","","","","oxc_ast::syntax_directed_operations","","","","","","","","","","oxc_ast::trivia","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oxc_ast::visitd":["","","A big unsigned integer type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Assign a value to a <code>BigUint</code>.","","AST builder for creating AST spans","","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns whether the bit in the given position is set","","","","","","","","","","","","","Determines the fewest bits necessary to express the <code>BigUint</code>…","","","","","","","","","Returns the truncated principal cube root of <code>self</code> – see …","","","","","","","","","","ECMAScript Grammar Contexts: [In] [Yield] [Await]","Returns the number of one bits.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Deprecated, use <code>is_multiple_of</code> instead.","","","","","","","","","Returns the argument unchanged.","","","","","","Creates and initializes a <code>BigUint</code>.","Creates and initializes a <code>BigUint</code>.","","","","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Creates and initializes a <code>BigUint</code>.","","Creates and initializes a <code>BigUint</code>.","","","Calculates the Greatest Common Divisor (GCD) of the number …","Calculates the Greatest Common Divisor (GCD) and Lowest …","","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if the number is not divisible by <code>2</code>.","","","Returns an iterator of <code>u32</code> digits representation of the …","Returns an iterator of <code>u64</code> digits representation of the …","Calculates the Lowest Common Multiple (LCM) of the number …","","Returns <code>(self ^ exponent) % modulus</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates and initializes a <code>BigUint</code>.","Rounds up to nearest multiple of argument.","","Returns the truncated principal <code>n</code>th root of <code>self</code> – see …","","Creates and initializes a <code>BigUint</code>. The input slice must …","","","Returns <code>self ^ exponent</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Rounds down to nearest multiple of argument.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets or clears the bit in the given position","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the truncated principal square root of <code>self</code> – …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Syntax-Directed Operations","","","Returns the byte representation of the <code>BigUint</code> in …","Returns the byte representation of the <code>BigUint</code> in …","","","","","","","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in little-endian …","Returns the integer formatted as a string in the given …","","","Returns the <code>u32</code> digits representation of the <code>BigUint</code> …","","Returns the <code>u64</code> digits representation of the <code>BigUint</code> …","Returns the number of least-significant bits that are ones.","Returns the number of least-significant bits that are zero,","Trivia (called that because it’s trivial) represent the …","","","","","","","","","","","","AST Visitor Pattern. See:","","","","","","","Section 13.3 Argument","","","Section 13.2.5 Array Expression","","","","Section 15.3 Arrow Function Definitions","https://tc39.es/ecma262/#prod-ArrowFormalParameters","","","Section 13.15 Assignment Expression","","","","","","13.15.5 Destructuring Assignment","","","","","","","","<code>AssignmentProperty</code>[Yield, Await] : <code>IdentifierReference</code>[…","","<code>AssignmentProperty</code>[Yield, Await] : <code>PropertyName</code>[?Yield, …","","","","","Section 15.8 Await Expression","","","","","","Section 13.6 - 13.13 Binary Expression","","","","Section 13.1 <code>BindingIdentifier</code>","","Section 14.3.3 Destructuring Binding Patterns","","","","","","","","","Section 14.2 Block Statement","","","","","Section 14.9 Break Statement","","Section 13.3 Call Expression","","","","","","","Section 15.7 Class Definitions","","","","","","","","","","","","","Section 13.14 Conditional Expression","","","","Section 14.8 Continue Statement","","","Section 14.16 Debugger Statement","","","Section 14.3 Declarations and the Variable Statement","","","","","Section 11.2.1 Directive Prologue","","","Section 14.7.2 Do-While Statement","","","","","","Section 14.4 Empty Statement","","","","","","","","","","Exports tc39/ecma262#sec-exports","","","Section 13 Expression","","","","","","","","","Section 14.5 Expression Statement","","","Section 14.7.5 For-In Statement","","Section 14.7.5 For-Of Statement","","Section 14.7.4 For Statement","","","","","https://tc39.es/ecma262/#prod-FormalParameters","","","","","Section 15.2 Function Definitions","","","","","","","","","","","","","","","","","","","","","","","","","","Section 12.6 <code>IdentifierName</code>","","Section 13.1 <code>IdentifierReference</code>","Section 14.6 If Statement","","","","","","","","","","","","","","","","","","","","","","","","","<code>JSXAttribute</code> : <code>JSXAttributeName</code> <code>JSXAttributeInitializer_opt</code>","<code>JSXAttributes</code> : <code>JSXSpreadAttribute</code> <code>JSXAttributes_opt</code> …","<code>JSXAttributeName</code> : <code>JSXIdentifier</code> <code>JSXNamespacedName</code>","<code>JSXAttributeValue</code> : “ <code>JSXDoubleStringCharacters_opt</code> “ …","<code>JSXChild</code> : <code>JSXText</code> <code>JSXElement</code> <code>JSXFragment</code> { …","<code>JSXClosingElement</code> : &lt; / <code>JSXElementName</code> &gt;","","<code>JSXElement</code> : <code>JSXSelfClosingElement</code> <code>JSXOpeningElement</code> …","","<code>JSXElementName</code> : <code>JSXIdentifier</code> <code>JSXNamespacedName</code> …","","","","<code>JSXFragment</code> : &lt; &gt; <code>JSXChildren_opt</code> &lt; / &gt;","","","<code>JSXMemberExpression</code> : <code>JSXIdentifier</code> . <code>JSXIdentifier</code> …","","<code>JSXNamespacedName</code> : <code>JSXIdentifier</code> : <code>JSXIdentifier</code>","<code>JSXOpeningElement</code> : &lt; <code>JSXElementName</code> <code>JSXAttributes_opt</code> &gt;","","<code>JSXSpreadAttribute</code> : { … <code>AssignmentExpression</code> }","","<code>JSXText</code> :: <code>JSXTextCharacter</code> <code>JSXTextopt</code> <code>JSXTextCharacter</code> :: …","","Section 13.1 <code>LabelIdentifier</code>","Section 14.13 Labelled Statement","","","","","","Section 13.13 Binary Logical Operators","","","","","","","","","Section 13.3 Member Expression","","","","","Section 13.3 Meta Property <code>new.target</code> | <code>import.meta</code>","","","","","","","","Section 16.2.2 Imports","","","","","","","","Section 13.3 New Expression","","","","","","","","","","","","","Section 13.2.6 Object Expression","","","","","","","","","","","","","","","","","","<code>RelationalExpression</code>[In, Yield, Await] : [+In] …","","","","","","","","","","","","","","","","","","","","","","","","","Section 14.10 Return Statement","","","Section 13.16 Sequence Expression","","","","","","","","","","","Part of TypeScript type signatures","","","","","Section 13.3 Spread Element","","","Section 14 Statements","","","","","","","","","","","","","","","","","","","","Section 14.12 Switch Statement","","","","","","","","","…","","","","","","","","","","","","…","","","","","","","<code>EnumDeclaration</code>: <code>const_opt</code> enum <code>BindingIdentifier</code> …","","","","","","","","","","","","","","","","","","…","","","","","","","<code>InterfaceDeclaration</code>: interface <code>BindingIdentifier</code> …","","","","…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","…","","","","","","","","","","","","","","…","","","","","","","","","","type C = A; type D = B.a; type E = D.c.b.a;","","","","…","","","","","","","","","","Section 13.2.9 Template Literal","","","","","Section 13.2.2 This Expression","","Section 14.14 Throw Statement","","","Section 14.15 Try Statement","","","","","","Section 13.5 Unary Expression","","","","","","","","https://tc39.es/ecma262/#prod-UniqueFormalParameters","Section 13.4 Update Expression","","","","v flag from …","","","Section 14.3.2 Variable Declaration","","","","","","","Section 14.7.3 While Statement","","Section 14.11 With Statement","","","Section 15.5 Generator Function Definitions","","","","","","","Returns the set containing all flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flagseturns the complement of this set of flags.","","","","","","","","","","","","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","","","","","","","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","Returns an empty set of flagseturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …nserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","","","","","","","","","","","","","","","","","","Returns <code>true</code> if no flags are currently stored.","","","","","","","","","","","","","","","Determines whether the given expr is a <code>null</code> literal","","<code>PrimaryExpression</code> tc39/ecma262#prod-PrimaryExpression","","","","","","","","","Static Semantics: <code>IsStringWellFormedUnicode</code> test for …","","","","","","","","","Determines whether the given expr is a <code>undefined</code> literal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get single quasi from <code>template</code>","","","","","","","","","","","Removes the specified flags in-placenserts or removes the specified flags depending on the …eturns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","From boa [spec]: …","","","","","","","","","","Toggles the specified flags in-placeeturns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","Remove nested parentheses from this expression.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</codeeturns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","A declaration file, or inside something with the <code>declare</code> …","[Await] Flag Section 15.8 Async Function Definitions Note …","5.1.5 Grammar Notation A production may be parameterized …","Decorator context does not parse computed member …","Typescript should parse extends clause as conditional type …","","","","[In] Flag, i.e. the [In] part in RelationalExpression[In, …","","[Return] Flag i.e. the [Return] in Statement[Yield, Await, …","","","","","[Yield] Flag","Returns the set containing all flags.","","","","","","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts file path to <code>SourceType</code> returns …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","turn on <code>LanguageVariant::JSX</code>","turn on <code>ModuleKind::Module</code>","","","turn on <code>ModuleKind::Script</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","turn on <code>Language::TypeScript { is_definition_file: false }</code>","turn on <code>Language::TypeScript { is_definition_file: true }</code>","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","<code>BoundName</code>","","<code>IsSimpleParameterList</code>","<code>PrivateBoundIdentifiers</code>","<code>PropName</code>","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"if":[0,0,0,[[1,2],1],[[1,3],1],[[1,4],1],[[1,1],1],[[1,3],1],[[1,5],1],[[1,4],1],[[1,6],1],[[1,7],1],[[1,6],1],[[1,1],1],[[1,5],1],[[1,5],1],[[1,6],1],[[1,2],1],[[1,1],1],[[1,3],1],[[1,7],1],[[1,1],1],[[1,7],1],[[1,6],1],[[1,2],1],[[1,2],1],[[1,7],1],[[1,3],1],[[1,5],1],[[1,4],1],[[1,4],1],[[1,4]],[[1,7]],[[1,5]],[[1,2]],[[1,1]],[[1,3]],[[1,1]],[[1,6]],[1],0,0,0,[[]],[[]],[[1,2],8],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1]],[[1,1]],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1]],[[1,1]],[1,2],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1]],[[1,1]],[[]],[[]],[1,1],[1,1],[[1,1],[[9,[1]]]],[[1,1],[[9,[1]]]],[[1,1],[[9,[1]]]],[[1,1],[[9,[1]]]],[1,1],[[1,1]],[[]],[[1,1],10],0,[1,2],[[],1],[[1,3],1],[[1,3],1],[[1,4],1],[[1,5],1],[[1,6],1],[[1,4],1],[[1,7],1],[[1,3],1],[[1,1],1],[[1,4],1],[[1,5],1],[[1,4],1],[[1,7],1],[[1,5],1],[[1,2],1],[[1,2],1],[[1,1],1],[[1,2],1],[[1,7],1],[[1,1],1],[[1,6],1],[[1,6],1],[[1,3],1],[[1,7],1],[[1,1],1],[[1,5],1],[[1,6],1],[[1,2],1],[[1,4]],[[1,7]],[[1,3]],[[1,6]],[[1,5]],[[1,2]],[[1,1]],[[1,1]],[[1,1],1],[[1,1],1],[[1,1]],[[1,1]],[[1,1],8],[[1,1],8],[[1,11],[[13,[12]]]],[[1,11],[[13,[12]]]],[[1,11],[[13,[12]]]],[[1,11],[[13,[12]]]],[[1,11],[[13,[12]]]],[[1,11],[[13,[12]]]],[6,1],[[]],[3,1],[2,1],[7,1],[4,1],[5,1],[[],1],[[],1],[14,[[9,[1]]]],[15,[[9,[1]]]],[16,[[9,[1]]]],[5,[[9,[1]]]],[5,[[9,[1]]]],[[],1],[17,[[13,[1,18]]]],[[17,5],[[13,[1,18]]]],[3,[[9,[1]]]],[2,[[9,[1]]]],[[1,1],1],[[1,1]],[1],[[]],[1,8],[[1,1],8],[1,8],[1,8],[1,8],[1,19],[1,20],[[1,1],1],[[1,1],1],[[1,1,1],1],[[1,2],1],[[1,6],1],[[1,5],1],[[1,1],1],[[1,2],1],[[1,7],1],[[1,7],1],[[1,4],1],[[1,1],1],[[1,4],1],[[1,2],1],[[1,3],1],[[1,6],1],[[1,4],1],[[1,5],1],[[1,3],1],[[1,3],1],[[1,3],1],[[1,7],1],[[1,4],1],[[1,6],1],[[1,1],1],[[1,2],1],[[1,7],1],[[1,1],1],[[1,6],1],[[1,5],1],[[1,5],1],[[1,1]],[[1,6]],[[1,4]],[[1,3]],[[1,2]],[[1,5]],[[1,7]],[[1,1]],[[[22,[5,21]]],1],[[1,1],1],[[1,5],1],[[1,5],1],[[],1],[5,[[9,[1]]]],[[1,1],[[9,[10]]]],[[1,7],1],[[1,5],1],[[1,7],1],[[1,6],1],[[1,4],1],[[1,1],1],[[1,5],1],[[1,4],1],[[1,6],1],[[1,4],1],[[1,7],1],[[1,1],1],[[1,6],1],[[1,3],1],[[1,3],1],[[1,3],1],[[1,4],1],[[1,6],1],[[1,1],1],[[1,7],1],[[1,1],1],[[1,3],1],[[1,2],1],[[1,2],1],[[1,2],1],[[1,5],1],[[1,5],1],[[1,2],1],[[1,5],1],[[1,1],1],[[],1],[[1,6],1],[[1,1],1],[[1,6],1],[[1,5],1],[[1,3],1],[[1,1],1],[[1,7],1],[[1,2],1],[[1,5],1],[[1,7],1],[[1,5],1],[[1,7],1],[[1,3],1],[[1,1],1],[[1,1],1],[[1,4],1],[[1,3],1],[[1,2],1],[[1,7],1],[[1,6],1],[[1,2],1],[[1,4],1],[[1,3],1],[[1,6],1],[[1,4],1],[[1,4],1],[[1,2],1],[[1,5],1],[[1,1]],[[1,7]],[[1,2]],[[1,1]],[[1,4]],[[1,3]],[[1,6]],[[1,5]],[[1,2,8]],[1],[1],[[1,23],1],[[1,24],1],[[1,16],1],[[1,5],1],[[1,15],1],[[1,25],1],[[1,4],1],[[1,4],1],[[1,7],1],[[1,16],1],[[1,15],1],[[1,26],1],[[1,7],1],[[1,3],1],[[1,15],1],[[1,25],1],[[1,16],1],[[1,23],1],[[1,2],1],[[1,16],1],[[1,6],1],[[1,2],1],[[1,2],1],[[1,3],1],[[1,23],1],[[1,15],1],[[1,25],1],[[1,3],1],[[1,7],1],[[1,5],1],[[1,25],1],[[1,5],1],[[1,26],1],[[1,26],1],[[1,2],1],[[1,4],1],[[1,3],1],[[1,4],1],[[1,24],1],[[1,6],1],[[1,7],1],[[1,23],1],[[1,24],1],[[1,6],1],[[1,26],1],[[1,5],1],[[1,6],1],[[1,24],1],[[1,3]],[[1,24]],[[1,4]],[[1,7]],[[1,26]],[[1,6]],[[1,15]],[[1,24]],[[1,25]],[[1,23]],[[1,4]],[[1,16]],[[1,7]],[[1,23]],[[1,6]],[[1,5]],[[1,25]],[[1,2]],[[1,3]],[[1,2]],[[1,26]],[[1,5]],[[1,16]],[[1,15]],[[1,4],1],[[1,3],1],[[1,23],1],[[1,26],1],[[1,7],1],[[1,5],1],[[1,2],1],[[1,26],1],[[1,7],1],[[1,23],1],[[1,24],1],[[1,6],1],[[1,23],1],[[1,25],1],[[1,24],1],[[1,16],1],[[1,3],1],[[1,7],1],[[1,16],1],[[1,15],1],[[1,15],1],[[1,5],1],[[1,16],1],[[1,7],1],[[1,4],1],[[1,25],1],[[1,6],1],[[1,6],1],[[1,15],1],[[1,5],1],[[1,3],1],[[1,6],1],[[1,2],1],[[1,26],1],[[1,23],1],[[1,2],1],[[1,2],1],[[1,24],1],[[1,24],1],[[1,25],1],[[1,4],1],[[1,15],1],[[1,5],1],[[1,4],1],[[1,26],1],[[1,16],1],[[1,3],1],[[1,25],1],[[1,15]],[[1,16]],[[1,26]],[[1,4]],[[1,5]],[[1,16]],[[1,4]],[[1,26]],[[1,15]],[[1,7]],[[1,3]],[[1,6]],[[1,2]],[[1,24]],[[1,25]],[[1,5]],[[1,24]],[[1,25]],[[1,3]],[[1,2]],[[1,6]],[[1,23]],[[1,23]],[[1,7]],0,0,[1,1],[1,1],[[1,7],1],[[1,4],1],[[1,3],1],[[1,2],1],[[1,1],1],[[1,6],1],[[1,6],1],[[1,5],1],[[1,7],1],[[1,1],1],[[1,3],1],[[1,3],1],[[1,6],1],[[1,5],1],[[1,4],1],[[1,7],1],[[1,7],1],[[1,3],1],[[1,4],1],[[1,6],1],[[1,1],1],[[1,2],1],[[1,4],1],[[1,2],1],[[1,5],1],[[1,2],1],[[1,5],1],[[1,1],1],[[1,3]],[[1,7]],[[1,1]],[[1,5]],[[1,2]],[[1,6]],[[1,1]],[[1,4]],[[],1],0,[1,[[9,[27]]]],[1,[[9,[1]]]],[1,[[22,[4,21]]]],[1,[[22,[4,21]]]],[[],28],[1,[[9,[29]]]],[1,[[9,[14]]]],[1,[[9,[15]]]],[1,[[9,[16]]]],[[]],[[1,5],[[22,[4,21]]]],[[1,5],[[22,[4,21]]]],[[1,5],30],[[],30],[1,[[9,[3]]]],[1,[[22,[5,21]]]],[1,[[9,[2]]]],[1,[[22,[2,21]]]],[1,2],[1,[[9,[2]]]],0,[27,[[13,[1,[31,[27]]]]]],[[],13],[15,[[13,[1,31]]]],[16,[[13,[1,31]]]],[24,[[13,[1,31]]]],[23,[[13,[1,31]]]],[26,[[13,[1,31]]]],[25,[[13,[1,31]]]],[27,[[13,[1,31]]]],[[],13],[[],32],0,[[],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],33],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[34,35],[36,17],[37,17],[38,17],[39,17],[40,17],[41,17],0,0,0,0,0,0,0,0,0,0,0,[[33,33],33],[[33,33]],[[33,33],33],[[33,33]],[33,4],[[33,33],33],[[33,33]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[42,[[9,[43]]]],[44,[[9,[43]]]],[43,[[22,[43]]]],[45,[[22,[43]]]],[46,[[22,[43]]]],[47,[[22,[43]]]],[48,[[22,[43]]]],[49,[[22,[43]]]],[50,[[22,[43]]]],[51,[[22,[43]]]],[42,[[22,[43]]]],[52,[[22,[43]]]],[53,[[22,[43]]]],[44,[[22,[43]]]],[54,[[22,[43]]]],[55,[[22,[43]]]],[56,[[22,[43]]]],0,0,0,0,0,0,[57,57],[58,58],[43,43],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[36,36],[68,68],[69,69],[70,70],[71,71],[72,72],[33,33],[73,73],[74,74],[75,75],[76,76],[37,37],[38,38],[39,39],[40,40],[41,41],[77,77],[78,78],[79,79],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[33,33],10],[80,[[9,[74]]]],[33,33],[81,8],0,0,0,0,0,0,0,0,0,0,0,[[33,33],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[33,33],33],0,0,0,0,0,0,0,0,0,0,[[],33],[[82,82],8],[[83,83],8],[[57,57],8],[[58,58],8],[[43,43],8],[[59,59],8],[[84,84],8],[[85,85],8],[[86,86],8],[[87,87],8],[[88,88],8],[[89,89],8],[[90,90],8],[[60,60],8],[[91,91],8],[[92,92],8],[[93,93],8],[[94,94],8],[[95,95],8],[[96,96],8],[[97,97],8],[[98,98],8],[[80,80],8],[[99,99],8],[[100,100],8],[[101,101],8],[[102,102],8],[[103,103],8],[[104,104],8],[[105,105],8],[[106,106],8],[[107,107],8],[[108,108],8],[[109,109],8],[[110,110],8],[[111,111],8],[[112,112],8],[[113,113],8],[[114,114],8],[[115,115],8],[[116,116],8],[[117,117],8],[[118,118],8],[[119,119],8],[[120,120],8],[[121,121],8],[[122,122],8],[[123,123],8],[[124,124],8],[[125,125],8],[[126,126],8],[[127,127],8],[[128,128],8],[[45,45],8],[[46,46],8],[[61,61],8],[[129,129],8],[[130,130],8],[[131,131],8],[[132,132],8],[[133,133],8],[[134,134],8],[[135,135],8],[[136,136],8],[[137,137],8],[[138,138],8],[[139,139],8],[[140,140],8],[[141,141],8],[[142,142],8],[[143,143],8],[[144,144],8],[[145,145],8],[[146,146],8],[[147,147],8],[[148,148],8],[[149,149],8],[[150,150],8],[[47,47],8],[[151,151],8],[[48,48],8],[[49,49],8],[[152,152],8],[[50,50],8],[[51,51],8],[[42,42],8],[[62,62],8],[[52,52],8],[[53,53],8],[[63,63],8],[[153,153],8],[[154,154],8],[[155,155],8],[[44,44],8],[[64,64],8],[[156,156],8],[[81,81],8],[[157,157],8],[[158,158],8],[[65,65],8],[[66,66],8],[[159,159],8],[[54,54],8],[[160,160],8],[[161,161],8],[[162,162],8],[[55,55],8],[[163,163],8],[[164,164],8],[[165,165],8],[[166,166],8],[[167,167],8],[[34,34],8],[[56,56],8],[[168,168],8],[[169,169],8],[[170,170],8],[[171,171],8],[[67,67],8],[[172,172],8],[[173,173],8],[[174,174],8],[[175,175],8],[[176,176],8],[[177,177],8],[[178,178],8],[[179,179],8],[[180,180],8],[[181,181],8],[[182,182],8],[[183,183],8],[[184,184],8],[[185,185],8],[[186,186],8],[[187,187],8],[[188,188],8],[[189,189],8],[[190,190],8],[[191,191],8],[[192,192],8],[[193,193],8],[[194,194],8],[[195,195],8],[[36,36],8],[[68,68],8],[[69,69],8],[[70,70],8],[[71,71],8],[[72,72],8],[[33,33],8],[[73,73],8],[[74,74],8],[[75,75],8],[[76,76],8],[[37,37],8],[[38,38],8],[[39,39],8],[[40,40],8],[[41,41],8],[[196,196],8],[[197,197],8],[[198,198],8],[[199,199],8],[[200,200],8],[[201,201],8],[[202,202],8],[[203,203],8],[[204,204],8],[[205,205],8],[[206,206],8],[[207,207],8],[[208,208],8],[[209,209],8],[[210,210],8],[[211,211],8],[[212,212],8],[[213,213],8],[[214,214],8],[[215,215],8],[[216,216],8],[[217,217],8],[[218,218],8],[[219,219],8],[[220,220],8],[[221,221],8],[[222,222],8],[[223,223],8],[[224,224],8],[[225,225],8],[[226,226],8],[[227,227],8],[[228,228],8],[[229,229],8],[[230,230],8],[[231,231],8],[[232,232],8],[[233,233],8],[[234,234],8],[[235,235],8],[[236,236],8],[[77,77],8],[[237,237],8],[[238,238],8],[[239,239],8],[[240,240],8],[[241,241],8],[[242,242],8],[[243,243],8],[[78,78],8],[[244,244],8],[[245,245],8],[[246,246],8],[[247,247],8],[[248,248],8],[[249,249],8],[[250,250],8],[[251,251],8],[[252,252],8],[[253,253],8],[[254,254],8],[[255,255],8],[[256,256],8],[[257,257],8],[[258,258],8],[[259,259],8],[[260,260],8],[[261,261],8],[[262,262],8],[[263,263],8],[[264,264],8],[[265,265],8],[[266,266],8],[[267,267],8],[[268,268],8],[[269,269],8],[[270,270],8],[[271,271],8],[[272,272],8],[[79,79],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[33,273]],0,0,0,0,0,0,[[82,11],274],[[83,11],274],[[57,11],274],[[58,11],274],[[43,11],274],[[59,11],274],[[84,11],274],[[85,11],274],[[86,11],274],[[87,11],274],[[88,11],274],[[89,11],274],[[90,11],274],[[60,11],274],[[91,11],274],[[92,11],274],[[93,11],274],[[94,11],274],[[95,11],274],[[96,11],274],[[97,11],274],[[98,11],274],[[80,11],274],[[99,11],274],[[100,11],274],[[101,11],274],[[102,11],274],[[103,11],274],[[104,11],274],[[105,11],274],[[106,11],274],[[107,11],274],[[108,11],274],[[109,11],274],[[110,11],274],[[111,11],274],[[112,11],274],[[113,11],274],[[114,11],274],[[115,11],274],[[116,11],274],[[117,11],274],[[118,11],274],[[119,11],274],[[120,11],274],[[121,11],274],[[122,11],274],[[123,11],274],[[124,11],274],[[125,11],274],[[126,11],274],[[127,11],274],[[128,11],274],[[45,11],274],[[46,11],274],[[61,11],274],[[61,11],274],[[129,11],274],[[130,11],274],[[131,11],274],[[132,11],274],[[133,11],274],[[134,11],274],[[135,11],274],[[136,11],274],[[137,11],274],[[138,11],274],[[139,11],274],[[140,11],274],[[141,11],274],[[142,11],274],[[143,11],274],[[144,11],274],[[145,11],274],[[146,11],274],[[147,11],274],[[148,11],274],[[149,11],274],[[150,11],274],[[47,11],274],[[151,11],274],[[48,11],274],[[49,11],274],[[152,11],274],[[50,11],274],[[51,11],274],[[42,11],274],[[62,11],274],[[52,11],274],[[53,11],274],[[63,11],274],[[153,11],274],[[154,11],274],[[155,11],274],[[44,11],274],[[64,11],274],[[156,11],274],[[81,11],274],[[157,11],274],[[158,11],274],[[65,11],274],[[66,11],274],[[159,11],274],[[54,11],274],[[160,11],274],[[161,11],274],[[162,11],274],[[55,11],274],[[163,11],274],[[164,11],274],[[165,11],274],[[166,11],274],[[167,11],274],[[34,11],274],[[56,11],274],[[168,11],274],[[169,11],274],[[170,11],274],[[171,11],274],[[67,11],274],[[67,11],274],[[172,11],274],[[173,11],274],[[174,11],274],[[175,11],274],[[176,11],274],[[177,11],274],[[178,11],274],[[179,11],274],[[180,11],274],[[181,11],274],[[182,11],274],[[183,11],274],[[184,11],274],[[185,11],274],[[186,11],274],[[187,11],274],[[188,11],274],[[189,11],274],[[190,11],274],[[191,11],274],[[192,11],274],[[193,11],274],[[194,11],274],[[195,11],274],[[36,11],274],[[68,11],274],[[69,11],274],[[70,11],274],[[71,11],274],[[72,11],274],[[72,11],274],[[33,11],274],[[33,11],274],[[33,11],274],[[33,11],274],[[33,11],274],[[33,11],274],[[73,11],274],[[74,11],274],[[75,11],274],[[76,11],274],[[37,11],274],[[37,11],274],[[38,11],274],[[38,11],274],[[39,11],274],[[39,11],274],[[40,11],274],[[40,11],274],[[41,11],274],[[41,11],274],[[196,11],274],[[197,11],274],[[198,11],274],[[199,11],274],[[200,11],274],[[201,11],274],[[202,11],274],[[203,11],274],[[204,11],274],[[205,11],274],[[206,11],274],[[207,11],274],[[208,11],274],[[209,11],274],[[210,11],274],[[211,11],274],[[212,11],274],[[213,11],274],[[214,11],274],[[215,11],274],[[216,11],274],[[217,11],274],[[218,11],274],[[219,11],274],[[220,11],274],[[221,11],274],[[222,11],274],[[223,11],274],[[224,11],274],[[225,11],274],[[226,11],274],[[227,11],274],[[228,11],274],[[229,11],274],[[230,11],274],[[231,11],274],[[232,11],274],[[233,11],274],[[234,11],274],[[235,11],274],[[236,11],274],[[77,11],274],[[237,11],274],[[238,11],274],[[239,11],274],[[240,11],274],[[241,11],274],[[242,11],274],[[243,11],274],[[78,11],274],[[244,11],274],[[245,11],274],[[246,11],274],[[247,11],274],[[248,11],274],[[249,11],274],[[250,11],274],[[251,11],274],[[252,11],274],[[253,11],274],[[254,11],274],[[255,11],274],[[256,11],274],[[257,11],274],[[258,11],274],[[259,11],274],[[260,11],274],[[261,11],274],[[262,11],274],[[263,11],274],[[264,11],274],[[265,11],274],[[266,11],274],[[267,11],274],[[268,11],274],[[269,11],274],[[270,11],274],[[271,11],274],[[272,11],274],[[79,11],274],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[37,76],[40,76],[39,76],[[]],[38,76],[41,76],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,[[9,[33]]]],[4,33],[4,33],[273,33],[35,[[9,[207]]]],0,0,[111,[[9,[83]]]],[229,57],[83,[[9,[58]]]],[83,83],[182,192],0,[82],[83],[57],[58],[43],[59],[84],[85],[86],[87],[88],[89],[90],[60],[91],[92],[93],[94],[95],[96],[97],[98],[80],[99],[100],[101],[102],[103],[104],[105],[106],[107],[108],[109],[110],[111],[112],[113],[114],[115],[116],[117],[118],[119],[120],[121],[122],[123],[124],[125],[126],[127],[128],[45],[46],[61],[129],[130],[131],[132],[133],[134],[135],[136],[137],[138],[139],[140],[141],[142],[143],[144],[145],[146],[147],[148],[149],[150],[47],[151],[48],[49],[152],[50],[51],[42],[62],[52],[53],[63],[153],[154],[155],[44],[64],[156],[81],[157],[158],[65],[66],[159],[54],[160],[161],[162],[55],[163],[164],[165],[166],[167],[34],[56],[168],[169],[170],[171],[67],[172],[173],[174],[175],[176],[177],[178],[179],[180],[181],[182],[183],[184],[185],[186],[187],[188],[189],[190],[191],[192],[193],[194],[195],[36],[68],[69],[70],[71],[72],[33],[73],[74],[75],[76],[37],[38],[39],[40],[41],[196],[197],[198],[199],[200],[201],[202],[203],[204],[205],[206],[207],[208],[209],[210],[211],[212],[213],[214],[215],[216],[217],[218],[219],[220],[221],[222],[223],[224],[225],[226],[227],[228],[229],[230],[231],[232],[233],[234],[235],[236],[77],[237],[238],[239],[240],[241],[242],[243],[78],[244],[245],[246],[247],[248],[249],[250],[251],[252],[253],[254],[255],[256],[257],[258],[259],[260],[261],[262],[263],[264],[265],[266],[267],[268],[269],[270],[271],[272],[79],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[33,33]],[[33,33],33],[[33,33],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[33,8],[37,8],[38,8],[40,8],[37,8],[38,8],[40,8],[38,8],[61,8],[229,8],[202,8],[42,8],[44,8],[110,8],[151,8],[82,8],[52,8],[153,8],[33,8],[38,8],[160,8],0,[42,8],[44,8],[8,8],[42,8],[229,8],[38,8],[40,8],[61,8],[83,8],[37,8],[91,8],[83,8],[38,8],[83,8],[89,8],[229,8],[38,8],[80,8],[151,8],[52,8],[[83,17],8],[83,8],[74,8],[80,8],[42,8],[79,8],0,[45,8],[42,8],[56,8],[171,8],[83,8],[79,8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[81,[[9,[65]]]],0,[115,[[9,[35]]]],[67,35],[251,35],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[275,14,17,75],69],[33,33],[95,83],0,0,0,0,0,0,0,0,[40,76],0,0,0,0,0,0,0,[95,8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[33,33],[[9,[10]]]],0,0,0,0,0,[81,[[9,[66]]]],[157,[[9,[66]]]],[158,[[9,[66]]]],[161,[[9,[66]]]],[87,9],[88,9],[89,9],[81,9],[157,9],[158,9],0,0,0,0,0,0,0,0,[81,[[9,[89]]]],0,[91,[[9,[35]]]],0,0,0,0,0,0,0,0,0,0,[[33,33]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[82,13],[83,13],[57,13],[58,13],[43,13],[59,13],[84,13],[85,13],[86,13],[87,13],[88,13],[89,13],[90,13],[60,13],[91,13],[92,13],[93,13],[94,13],[95,13],[80,13],[99,13],[100,13],[101,13],[102,13],[103,13],[104,13],[105,13],[106,13],[107,13],[108,13],[109,13],[110,13],[111,13],[112,13],[113,13],[114,13],[115,13],[116,13],[117,13],[118,13],[119,13],[120,13],[121,13],[122,13],[123,13],[124,13],[125,13],[126,13],[127,13],[128,13],[45,13],[46,13],[61,13],[129,13],[130,13],[131,13],[132,13],[133,13],[134,13],[135,13],[136,13],[137,13],[138,13],[139,13],[140,13],[141,13],[142,13],[143,13],[144,13],[145,13],[146,13],[147,13],[148,13],[149,13],[150,13],[47,13],[151,13],[48,13],[49,13],[152,13],[50,13],[51,13],[42,13],[62,13],[52,13],[53,13],[153,13],[154,13],[155,13],[44,13],[64,13],[156,13],[81,13],[157,13],[158,13],[65,13],[66,13],[159,13],[54,13],[160,13],[161,13],[162,13],[55,13],[163,13],[164,13],[165,13],[166,13],[167,13],[34,13],[56,13],[168,13],[169,13],[170,13],[171,13],[67,13],[172,13],[173,13],[174,13],[175,13],[176,13],[177,13],[178,13],[179,13],[180,13],[181,13],[182,13],[183,13],[184,13],[185,13],[186,13],[187,13],[188,13],[189,13],[190,13],[191,13],[192,13],[193,13],[194,13],[195,13],[36,13],[68,13],[69,13],[70,13],[71,13],[72,13],[33,13],[73,13],[74,13],[76,13],[37,13],[38,13],[39,13],[40,13],[41,13],[196,13],[197,13],[198,13],[199,13],[200,13],[201,13],[202,13],[203,13],[204,13],[205,13],[206,13],[207,13],[208,13],[209,13],[210,13],[211,13],[212,13],[213,13],[214,13],[215,13],[216,13],[217,13],[218,13],[219,13],[220,13],[221,13],[222,13],[223,13],[224,13],[225,13],[226,13],[227,13],[228,13],[229,13],[230,13],[231,13],[232,13],[233,13],[234,13],[235,13],[236,13],[77,13],[237,13],[238,13],[239,13],[240,13],[241,13],[242,13],[243,13],[78,13],[244,13],[245,13],[246,13],[247,13],[248,13],[249,13],[250,13],[251,13],[252,13],[253,13],[254,13],[255,13],[256,13],[257,13],[258,13],[259,13],[260,13],[261,13],[262,13],[263,13],[264,13],[265,13],[266,13],[267,13],[268,13],[269,13],[270,13],[271,13],[272,13],[79,13],[[33,33,8]],0,0,0,0,0,0,[83,275],[87,275],[89,275],[90,275],[95,275],[102,275],[110,275],[111,275],[126,275],[45,275],[136,275],[47,275],[151,275],[152,275],[81,275],[34,275],[171,275],[67,275],[180,275],[202,275],[241,275],[251,275],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[81,8],0,0,0,[89,[[9,[35]]]],[81,[[9,[35]]]],[95,[[9,[17]]]],[[33,33],33],[[33,33]],0,0,[[33,33],33],0,0,0,0,0,0,0,0,[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[69,[9,[7]]],[[9,[30]]]],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[33,33]],0,0,0,0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[33,33],33],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[83,83],0,[[276,275,89,[9,[83]],8,8],81],[276,277],0,[[276,275,[278,[[9,[102]]]],[9,[275]]],83],[[276,275,[278,[[9,[47]]]]],151],[[276,275,8,8,8,[277,[52]],[277,[153]],[9,[[277,[233]]]],[9,[199]]],83],[[276,275,37,110,83],83],[[276,275,47,83],47],[[276,275,83],83],[[276,275,83,38,83],83],[[276,43],151],[[276,151,[9,[199]],8],47],[[276,275,[278,[126]]],[[277,[128]]]],[[276,[277,[128]]],126],[[]],[[]],[[276,275,[9,[59]]],126],[[276,275,83,[278,[102]],8,[9,[[277,[231]]]]],83],[[276,275,[9,[47]],[277,[128]]],[[277,[149]]]],[[276,275,124],83],[[276,64,275,[9,[43]],[9,[83]],156,[9,[[277,[233]]]],[9,[[277,[231]]]],[9,[[278,[[277,[237]]]]]],8,[9,[[278,[269]]]],8],[[277,[44]]]],[[276,[277,[44]]],126],[[276,[277,[44]]],83],[[276,275,83,83,8],83],[[276,275,83,83,83],83],[[276,275,[9,[59]]],126],[[276,275],126],[[276,275,83],269],[[276,275,74,17],127],[[276,275,126,83],126],[[276,275],126],[[276,[9,[67]],74,[9,[[278,[167]]]],[9,[79]]],[[277,[169]]]],[[276,171,67],[[277,[168]]]],[[276,[9,[45]],[278,[170]],[9,[74]],[9,[79]]],[[277,[56]]]],[[276,275,83],126],[[276,275,139,83,126],126],[[276,275,8,139,83,126],126],[[276,275,[9,[136]],[9,[83]],[9,[83]],126],126],[[276,275,47,[9,[77]],8,[9,[[278,[269]]]]],53],[[276,275,63,[278,[53]]],[[277,[52]]]],[[]],[[276,62,275,[9,[43]],8,8,8,[277,[52]],[9,[[277,[153]]]],[9,[[277,[233]]]],[9,[199]],8],[[277,[42]]]],[[276,275,[278,[127]],[278,[126]]],[[277,[153]]]],[[276,[277,[42]]],126],[[276,[277,[42]]],83],[[276,58],83],[[276,275,83,126,[9,[126]]],126],[[276,[278,[163]],74,[9,[[278,[167]]]],[9,[79]]],[[277,[55]]]],[[276,275,83,[278,[83]]],83],[[]],[[276,275,202,8],202],[[276,275],202],[[276,275,190,[9,[191]]],[[277,[188]]]],[[276,275,180],[[277,[176]]]],[[276,275],179],[[276,275,[277,[175]],[9,[[277,[176]]]],[278,[193]]],[[277,[174]]]],[[276,275],186],[[276,275,185],184],[[276,275,178,179,[278,[193]]],[[277,[177]]]],[[276,275,35],192],[[276,275,183,192],[[277,[182]]]],[[276,275,192,192],[[277,[181]]]],[[276,275,8,180,[278,[187]],[9,[[277,[231]]]]],[[277,[175]]]],[[276,275],178],[[276,275,83],[[277,[189]]]],[[276,275,83],194],[[276,275,35],195],[[276,275,59,126],126],[[276,70],83],[[276,36],83],[[276,68],83],[[276,69],83],[[276,71],83],[[276,74],83],[[276,275,83,39,83],83],[[276,275,57,57],83],[[276,275,160],126],[279,276],[[276,275,83,[278,[102]],[9,[[277,[231]]]]],83],[[276,17],17],[276,278],[276,278],[[276,7],278],[[276,275,[278,[87]],[9,[275]]],83],[[276,275,[278,[152]]],151],[[276,275,83],83],[[276,275,83,66,8],83],[[276,275,[278,[127]],[278,[126]],280],82],[[276,275,60,89,90,8,8,8],[[277,[88]]]],[[276,275,47],[[277,[51]]]],[[276,[277,[51]]],47],[[276,275,[9,[83]]],126],[[276,275,[278,[83]]],83],[[276,275,83],[[277,[101]]]],[[276,275,[278,[126]]],81],[[276,275,83,57,8],83],[[276,275],83],[[276,275,[9,[83]],[278,[126]]],145],[[276,275,83,[278,[145]]],126],[[276,275,83,91,[9,[[277,[231]]]]],83],[[276,91],83],[[276,275],83],[[276,275,83],126],[[],13],[[],13],[[276,275,[277,[128]],[9,[[277,[149]]]],[9,[[277,[128]]]]],126],[[276,275],202],[[276,275,202],202],[[276,275],202],[[276,275],202],[[276,275,[277,[52]],[9,[199]],[9,[[277,[233]]]]],241],[[276,275,202,202,202,202],202],[[276,275,[277,[52]],[9,[199]],[9,[[277,[233]]]]],241],[[276,275,8,[277,[52]],199,[9,[[277,[233]]]]],202],[[276,275,43,[278,[197]],8,8],45],[[276,275,[277,[52]],199,[9,[[277,[233]]]]],202],[[276,275,43,266,8,79],45],[[276,275,8,202,[9,[229]],[9,[[277,[231]]]]],202],[[276,275,[278,[[277,[246]]]],199],241],[[276,275,202,202],202],[[276,275,[277,[232]]],202],[[276,275,[278,[241]]],[[277,[239]]]],[[276,275,43,[277,[239]],[9,[[277,[233]]]],[9,[[278,[[277,[247]]]]]],8],45],[[276,278],[[278,[[277,[247]]]]]],[[276,275,[278,[202]]],202],[[276,275,201],202],[[276,275,[277,[232]],[9,[202]],202,261,261],202],[[276,275,89,8,8,78,[277,[52]],[9,[199]],[9,[[277,[233]]]]],241],[[276,275,[278,[126]]],[[277,[253]]]],[[276,275,251,252,8],[[277,[250]]]],[[276,275],202],[[276,275,83],83],[[276,275],202],[[276,275],202],[[276,275],202],[[276,275,8,8,8,89,[9,[199]]],241],[[276,275],202],[[276,275],202],[[276,275,[278,[93]],[278,[202]]],202],[[276,275],202],[[276,275,[278,[214]]],202],[[276,275,43,202,[9,[[277,[233]]]],8],45],[[276,275,202],199],[[276,275,[278,[202]]],[[277,[231]]]],[[276,275,202,83],83],[[276,275,229,[9,[[277,[231]]]]],[[277,[237]]]],[[276,275,[278,[241]]],202],[[276,275,207,202],202],[[276,275,43,[9,[202]],[9,[202]],8,8],[[277,[232]]]],[[276,275,[278,[[277,[232]]]]],[[277,[233]]]],[[276,275,249,8,[9,[199]]],202],[[276,275,229,[9,[[277,[231]]]]],202],[[276,275,229,[9,[[277,[231]]]]],202],[[276,275],202],[[276,275,[278,[202]]],202],[[276,275],202],[[276,275],202],[[],32],[[276,275,40,8,83],83],[[276,275,41,8,111],83],[[276,275,61,[278,[129]]],[[277,[46]]]],[[276,275,61,47,[9,[83]],8],129],[[276,275,83,126],126],[[276,275,83,126],126],[[276,275,8,[9,[83]]],83],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[281,281],[[]],[[281,281],8],[[281,11],274],[[]],[281,[[9,[35]]]],[[]],[281,8],[281,8],[281,8],[281,8],[281,8],[281,8],[281,8],[281,8],[281,275],[[]],[[],13],[[],13],[[],32],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],282],[[282,8],282],[[282,8],282],[[282,8],282],[[282,8],282],[[282,8],282],[[282,8],282],[[282,8],282],[[282,282],282],[[282,282]],[[282,282],282],[[282,282]],[282,4],[[282,282],282],[[282,282]],[[]],[[]],[[]],[[]],[282,282],[283,283],[[]],[[]],[[282,282],10],[282,282],[[282,282],8],[[],282],[[282,282],282],[[],282],[[282,282],8],[[283,283],8],[[282,273]],[[282,11],274],[[282,11],274],[[282,11],274],[[282,11],274],[[282,11],274],[[283,11],274],[[]],[[]],[4,[[9,[282]]]],[4,282],[4,282],[273,282],[282,8],[282,8],[282,8],[282,8],[282,8],[282,8],[282,8],[282],[[282,282]],[[282,282],282],[[282,282],8],[[]],[[]],[282,8],[282,8],[283,8],[283,8],[283,8],[282,282],[[282,282],[[9,[10]]]],[[282,282]],[[282,282,8]],[[282,282],282],[[282,282]],[[282,282],282],[[]],[[]],[[282,282]],[[],13],[[],13],[[],13],[[],13],[[],32],[[],32],[[282,282],282],[[282,8],282],[[282,8],282],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[284,280],[[],284],[280,280],[285,285],[286,286],[287,287],[[]],[[]],[[]],[[]],[[],280],[[],284],[280,282],[[280,280],8],[[285,285],8],[[286,286],8],[[287,287],8],[[280,11],274],[[285,11],274],[[286,11],274],[[287,11],274],[[288,11],274],[[288,11],274],[[]],[[]],[[]],[[]],[[]],[[]],[[[290,[289]]],[[13,[280,288]]]],[280],[285],[286],[287],[[]],[[]],[[]],[[]],[[]],[[]],[280,8],[280,8],[280,8],[280,8],[280,8],[280,8],[284,284],[284,284],[280,286],[291],[284,284],[280],[280],[280],[280],[280],[[],28],[[]],[[]],[[]],[[]],[[],30],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[284,284],[284,284],0,0,0,[[]],[[]],[275,275],[[]],[[],275],0,[[275,275],8],[[275,11],274],[[]],[275],[[]],[275,8],[275,5],[[5,5],275],[275,13],[[],275],0,[[]],[[],13],[[],13],[[],32],0,0,0,0,0,[[],[[9,[43]]]],[[],[[22,[43]]]],[[],8],[[],[[9,[66]]]],[[],9],0,0,0,0,0,[[292,275,293]],[[]],[[]],[[]],[[]],[[]],[[]],[294,294],[293,293],[[]],[[]],[[],292],[[292,11],274],[[294,11],274],[[293,11],274],[[]],[[]],[[]],[[292,275],8],[[]],[[]],[[]],[[5,293],294],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],32],[[],32],[[],32],0,[281],[86],[281],[102],[113],[85],[50],[154],[109],[48],[110],[115],[112],[117],[118],[119],[116],[122],[70],[105],[43],[128],[36],[141],[80],[149],[124],[123],[44],[156],[81],[83],[96],[108],[140],[150],[45],[269],[127],[133],[130],[196],[197],[169],[168],[56],[83],[83],[131],[128],[137],[138],[135],[136],[139],[53],[52],[42],[153],[57],[58],[132],[55],[163],[165],[162],[166],[164],[188],[187],[191],[193],[174],[180],[185],[184],[177],[175],[189],[194],[59],[146],[107],[95],[100],[157],[54],[99],[68],[69],[114],[86],[49],[152],[87],[125],[47],[98],[66],[106],[82],[88],[158],[89],[90],[71],[51],[142],[120],[111],[101],[126],[126],[278],[159],[97],[74],[121],[145],[144],[92],[93],[91],[84],[147],[148],[215],[208],[263],[243],[203],[245],[259],[258],[265],[242],[246],[209],[272],[238],[205],[200],[260],[244],[253],[250],[268],[221],[240],[241],[214],[210],[202],[234],[199],[264],[254],[229],[206],[232],[233],[231],[248],[228],[204],[223],[104],[103],[46],[129],[134],[143],[155]],"p":[[3,"BigUint"],[15,"u64"],[15,"u128"],[15,"u8"],[15,"u32"],[15,"u16"],[15,"usize"],[15,"bool"],[4,"Option"],[4,"Ordering"],[3,"Formatter"],[3,"Error"],[4,"Result"],[15,"f64"],[15,"i128"],[15,"i64"],[15,"str"],[3,"ParseBigIntError"],[3,"U32Digits"],[3,"U64Digits"],[3,"Global"],[3,"Vec"],[15,"i32"],[15,"i8"],[15,"isize"],[15,"i16"],[3,"BigInt"],[3,"CompactString"],[15,"f32"],[3,"String"],[3,"TryFromBigIntError"],[3,"TypeId"],[3,"RegExpFlags"],[4,"ImportAttributeKey"],[6,"Atom"],[3,"BooleanLiteral"],[4,"AssignmentOperator"],[4,"BinaryOperator"],[4,"LogicalOperator"],[4,"UnaryOperator"],[4,"UpdateOperator"],[3,"Function"],[3,"BindingIdentifier"],[3,"Class"],[4,"Declaration"],[3,"VariableDeclaration"],[3,"BindingPattern"],[3,"AssignmentPattern"],[3,"ObjectPattern"],[3,"ArrayPattern"],[3,"RestElement"],[3,"FormalParameters"],[3,"FormalParameter"],[3,"ModuleDeclaration"],[3,"ImportDeclaration"],[3,"ExportNamedDeclaration"],[3,"IdentifierName"],[3,"IdentifierReference"],[3,"LabelIdentifier"],[4,"PropertyKind"],[4,"VariableDeclarationKind"],[4,"FunctionType"],[4,"FormalParameterKind"],[4,"ClassType"],[4,"MethodDefinitionKind"],[3,"PrivateIdentifier"],[4,"ModuleExportName"],[3,"NullLiteral"],[3,"NumberLiteral"],[3,"BigintLiteral"],[3,"RegExpLiteral"],[3,"RegExp"],[3,"EmptyObject"],[3,"StringLiteral"],[4,"NumberBase"],[4,"Operator"],[4,"TSAccessibility"],[4,"TSMethodSignatureKind"],[4,"ImportOrExportKind"],[3,"CallExpression"],[4,"ClassElement"],[3,"Program"],[4,"Expression"],[3,"ThisExpression"],[3,"ArrayExpression"],[3,"ObjectExpression"],[4,"ObjectProperty"],[3,"Property"],[4,"PropertyKey"],[4,"PropertyValue"],[3,"TemplateLiteral"],[3,"TaggedTemplateExpression"],[3,"TemplateElement"],[3,"TemplateElementValue"],[4,"MemberExpression"],[3,"ComputedMemberExpression"],[3,"StaticMemberExpression"],[3,"PrivateFieldExpression"],[3,"NewExpression"],[3,"MetaProperty"],[3,"SpreadElement"],[4,"Argument"],[3,"UpdateExpression"],[3,"UnaryExpression"],[3,"BinaryExpression"],[3,"PrivateInExpression"],[3,"LogicalExpression"],[3,"ConditionalExpression"],[3,"AssignmentExpression"],[4,"AssignmentTarget"],[4,"SimpleAssignmentTarget"],[4,"AssignmentTargetPattern"],[3,"ArrayAssignmentTarget"],[3,"ObjectAssignmentTarget"],[4,"AssignmentTargetMaybeDefault"],[3,"AssignmentTargetWithDefault"],[4,"AssignmentTargetProperty"],[3,"AssignmentTargetPropertyIdentifier"],[3,"AssignmentTargetPropertyProperty"],[3,"SequenceExpression"],[3,"Super"],[3,"AwaitExpression"],[3,"ChainExpression"],[4,"ChainElement"],[3,"ParenthesizedExpression"],[4,"Statement"],[3,"Directive"],[3,"BlockStatement"],[3,"VariableDeclarator"],[3,"EmptyStatement"],[3,"ExpressionStatement"],[3,"IfStatement"],[3,"DoWhileStatement"],[3,"WhileStatement"],[3,"ForStatement"],[4,"ForStatementInit"],[3,"ForInStatement"],[3,"ForOfStatement"],[4,"ForStatementLeft"],[3,"ContinueStatement"],[3,"BreakStatement"],[3,"ReturnStatement"],[3,"WithStatement"],[3,"SwitchStatement"],[3,"SwitchCase"],[3,"LabeledStatement"],[3,"ThrowStatement"],[3,"TryStatement"],[3,"CatchClause"],[3,"DebuggerStatement"],[4,"BindingPatternKind"],[4,"ObjectPatternProperty"],[3,"FunctionBody"],[3,"ArrowExpression"],[3,"YieldExpression"],[3,"ClassBody"],[3,"MethodDefinition"],[3,"PropertyDefinition"],[3,"StaticBlock"],[4,"ModuleDeclarationKind"],[3,"AccessorProperty"],[3,"ImportExpression"],[4,"ImportDeclarationSpecifier"],[3,"ImportSpecifier"],[3,"ImportDefaultSpecifier"],[3,"ImportNamespaceSpecifier"],[3,"ImportAttribute"],[3,"ExportDefaultDeclaration"],[3,"ExportAllDeclaration"],[3,"ExportSpecifier"],[4,"ExportDefaultDeclarationKind"],[3,"JSDocNullableType"],[3,"JSDocUnknownType"],[3,"JSXElement"],[3,"JSXOpeningElement"],[3,"JSXClosingElement"],[3,"JSXFragment"],[3,"JSXOpeningFragment"],[3,"JSXClosingFragment"],[4,"JSXElementName"],[3,"JSXNamespacedName"],[3,"JSXMemberExpression"],[4,"JSXMemberExpressionObject"],[3,"JSXExpressionContainer"],[4,"JSXExpression"],[3,"JSXEmptyExpression"],[4,"JSXAttributeItem"],[3,"JSXAttribute"],[3,"JSXSpreadAttribute"],[4,"JSXAttributeName"],[4,"JSXAttributeValue"],[3,"JSXIdentifier"],[4,"JSXChild"],[3,"JSXSpreadChild"],[3,"JSXText"],[3,"TSEnumDeclaration"],[3,"TSEnumMember"],[4,"TSEnumMemberName"],[3,"TSTypeAnnotation"],[3,"TSLiteralType"],[4,"TSLiteral"],[4,"TSType"],[3,"TSConditionalType"],[3,"TSUnionType"],[3,"TSIntersectionType"],[3,"TSTypeOperatorType"],[4,"TSTypeOperator"],[3,"TSArrayType"],[3,"TSIndexedAccessType"],[3,"TSTupleType"],[3,"TSNamedTupleMember"],[3,"TSOptionalType"],[3,"TSRestType"],[4,"TSTupleElement"],[3,"TSAnyKeyword"],[3,"TSStringKeyword"],[3,"TSBooleanKeyword"],[3,"TSNumberKeyword"],[3,"TSNeverKeyword"],[3,"TSUnknownKeyword"],[3,"TSNullKeyword"],[3,"TSUndefinedKeyword"],[3,"TSVoidKeyword"],[3,"TSSymbolKeyword"],[3,"TSThisKeyword"],[3,"TSObjectKeyword"],[3,"TSBigIntKeyword"],[3,"TSTypeReference"],[4,"TSTypeName"],[3,"TSQualifiedName"],[3,"TSTypeParameterInstantiation"],[3,"TSTypeParameter"],[3,"TSTypeParameterDeclaration"],[3,"TSTypeAliasDeclaration"],[3,"TSAbstractMethodDefinition"],[3,"TSAbstractPropertyDefinition"],[3,"TSClassImplements"],[3,"TSInterfaceDeclaration"],[3,"TSInterfaceBody"],[3,"TSPropertySignature"],[4,"TSSignature"],[3,"TSIndexSignature"],[3,"TSCallSignatureDeclaration"],[3,"TSMethodSignature"],[3,"TSConstructSignatureDeclaration"],[3,"TSIndexSignatureName"],[3,"TSInterfaceHeritage"],[3,"TSTypePredicate"],[4,"TSTypePredicateName"],[3,"TSModuleDeclaration"],[4,"TSModuleDeclarationName"],[4,"TSModuleDeclarationBody"],[3,"TSModuleBlock"],[3,"TSTypeLiteral"],[3,"TSInferType"],[3,"TSTypeQuery"],[3,"TSImportType"],[3,"TSFunctionType"],[3,"TSConstructorType"],[3,"TSMappedType"],[4,"TSMappedTypeModifierOperator"],[3,"TSTemplateLiteralType"],[3,"TSAsExpression"],[3,"TSTypeAssertion"],[3,"TSImportEqualsDeclaration"],[4,"TSModuleReference"],[3,"TSExternalModuleReference"],[3,"TSNonNullExpression"],[3,"Decorator"],[3,"TSExportAssignment"],[3,"TSNamespaceExportDeclaration"],[3,"TSInstantiationExpression"],[8,"IntoIterator"],[6,"Result"],[3,"Span"],[3,"AstBuilder"],[3,"Box"],[3,"Vec"],[3,"Allocator"],[3,"SourceType"],[4,"AstKind"],[3,"Context"],[4,"StatementContext"],[3,"SourceTypeBuilder"],[4,"Language"],[4,"ModuleKind"],[4,"LanguageVariant"],[4,"SourceTypeError"],[3,"Path"],[8,"AsRef"],[3,"Demand"],[3,"Trivias"],[4,"CommentKind"],[3,"Comment"],[13,"TypeScript"],[8,"GetSpan"],[8,"BoundName"],[8,"BoundNames"],[8,"IsSimpleParameterList"],[8,"PrivateBoundIdentifiers"],[8,"PropName"],[8,"Visit"]]},\
"oxc_benchmark":{"doc":"","t":[5],"n":["get_code"],"q":["oxc_benchmark"],"d":["Errors"],"i":[0],"f":[[1,[[3,[2]]]]],"p":[[15,"str"],[3,"String"],[4,"Result"]]},\
"oxc_cli":{"doc":"","t":[3,3,4,3,13,13,13,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12],"n":["Cli","CliOptions","CliRunResult","Command","LintResult","None","PathNotFound","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","cli_options","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","fmt","fmt","from","from","from","from","ignore_pattern","init","init","init","init","into","into","into","into","lint","new","new","paths","quiet","report","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","number_of_diagnostics","number_of_files","paths"],"q":["oxc_cli","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oxc_cli::CliRunResult","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Runs the linter on the specified paths and returns a …","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,6,6,6,8,7,1,6,8,7,1,6,1,7,1,8,7,1,6,8,7,1,6,8,7,1,6,1,6,8,7,1,6,8,8,7,1,6,8,7,1,6,7,7,1,8,8,6,8,8,7,1,6,8,7,1,6,8,7,1,6,13,13,14],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,2],0,[[],1],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[[1,4],5],[[6,4],5],[[]],[[]],[[]],[[]],0,[[],3],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],[7,6],[8,7],[[],1],0,0,[6,9],[[],10],[11,[[10,[8]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],12],[[],12],[[],12],[[],12],0,0,0],"p":[[3,"Command"],[3,"Command"],[15,"usize"],[3,"Formatter"],[6,"Result"],[4,"CliRunResult"],[3,"Cli"],[3,"CliOptions"],[3,"ExitCode"],[4,"Result"],[3,"ArgMatches"],[3,"TypeId"],[13,"LintResult"],[13,"PathNotFound"]]},\
"oxc_coverage":{"doc":"","t":[3,3,3,3,8,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AppArgs","BabelCase","BabelSuite","PrinterTest262Case","Suite","Test262Case","Test262Suite","TypeScriptCase","TypeScriptSuite","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","coverage_report","coverage_report","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","detail","diff","drop","drop","drop","drop","drop","drop","drop","drop","filter","fmt","from","from","from","from","from","from","from","from","get_test_cases","get_test_cases","get_test_cases","get_test_cases","get_test_root","get_test_root","get_test_root","get_test_root","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","meta","new","new","new","print_coverage","print_coverage","project_root","read_metadata","read_test_cases","read_test_cases","run","run","save_test_cases","save_test_cases","save_test_cases","save_test_cases","set_result","skip_test_path","skip_test_path","skip_test_path","skip_test_path","snapshot_errors","snapshot_errors","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["oxc_coverage","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","A Test Suite is responsible for reading code from a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Print mismatch diff","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Errors","Errors","Panics","Errors","","","","","","","","","","","","","","Errors","Errors","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,1,17,18,2,10,3,19,4,1,17,18,2,10,3,19,4,20,20,1,2,3,4,1,17,18,2,10,3,19,4,1,17,18,2,10,3,19,4,4,4,1,17,18,2,10,3,19,4,4,4,1,17,18,2,10,3,19,4,20,1,2,3,20,1,2,3,1,17,18,2,10,3,19,4,1,17,18,2,10,3,19,4,10,1,2,3,20,20,0,10,20,20,20,20,20,1,2,3,10,20,1,2,3,20,20,1,17,18,2,10,3,19,4,1,17,18,2,10,3,19,4,1,17,18,2,10,3,19,4],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],[[1,[0]]]],[[],[[2,[0]]]],[[],[[3,[0]]]],[[],4],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],0,0,[5],[5],[5],[5],[5],[5],[5],[5],0,[[4,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[[1,[0]]],8],[[[2,[0]]],8],[[[3,[0]]],8],[[],9],[[[1,[0]]],9],[[[2,[0]]],9],[[[3,[0]]],9],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],[[1,[0]]]],[[],[[2,[0]]]],[[],[[3,[0]]]],0,0,[[],13],[11,[[12,[0]]]],[4],[4],[[11,4]],[[11,4]],[8],[[[1,[0]],[8,[0]]]],[[[2,[0]],[8,[0]]]],[[[3,[0]],[8,[0]]]],0,[9,14],[[[1,[0]],9],14],[[[2,[0]],9],14],[[[3,[0]],9],14],0,0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16]],"p":[[3,"BabelSuite"],[3,"Test262Suite"],[3,"TypeScriptSuite"],[3,"AppArgs"],[15,"usize"],[3,"Formatter"],[6,"Result"],[3,"Vec"],[3,"Path"],[3,"Test262Case"],[15,"str"],[6,"Result"],[3,"PathBuf"],[15,"bool"],[4,"Result"],[3,"TypeId"],[3,"BabelCase"],[3,"PrinterTest262Case"],[3,"TypeScriptCase"],[8,"Suite"]]},\
"oxc_diagnostics":{"doc":"Diagnostics Wrapper Exports <code>thiserror</code> and <code>miette</code>","t":[3,6,6,6,11,11,11,11,11,11,11,11,11,11,2,2,11,11,11,11],"n":["Diagnostics","Error","Result","Severity","borrow","borrow_mut","clone","clone_into","default","deref","fmt","from","into","into_inner","miette","thiserror","to_owned","try_from","try_into","type_id"],"q":["oxc_diagnostics","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Panics","","","","","",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1],"f":[0,0,0,0,[[]],[[]],[1,1],[[]],[[],1],[1],[[1,2],3],[[]],[[]],[1,[[5,[4]]]],0,0,[[]],[[],6],[[],6],[[],7]],"p":[[3,"Diagnostics"],[3,"Formatter"],[6,"Result"],[6,"Error"],[3,"Vec"],[4,"Result"],[3,"TypeId"]]},\
"oxc_linter":{"doc":"","t":[3,11,11,11,11,11,11,11,0,11,11,11,11,18,8,8,11,11,10],"n":["Linter","borrow","borrow_mut","fmt","from","from_rules","into","new","rule","run","try_from","try_into","type_id","NAME","Rule","RuleMeta","documentation","from_configuration","run"],"q":["oxc_linter","","","","","","","","","","","","","oxc_linter::rule","","","","",""],"d":["","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Initialize from eslint json configuration",""],"i":[0,1,1,1,1,1,1,1,0,1,1,1,1,13,0,0,14,13,13],"f":[0,[[]],[[]],[[1,2],3],[[]],[[[4,[0]]],1],[[]],[[],1],0,[[1,5],[[4,[6]]]],[[],7],[[],7],[[],8],0,0,0,[[],[[10,[9]]]],[11],0],"p":[[3,"Linter"],[3,"Formatter"],[6,"Result"],[3,"Vec"],[3,"Rc"],[6,"Error"],[4,"Result"],[3,"TypeId"],[15,"str"],[4,"Option"],[4,"Value"],[6,"AstNode"],[8,"Rule"],[8,"RuleMeta"]]},\
"oxc_macros":{"doc":"","t":[14,14],"n":["declare_oxc_lint","declare_oxc_lint_test"],"q":["oxc_macros",""],"d":["Macro used to declare an oxc lint rule","Same as <code>declare_oxc_lint</code>, but doesn’t do imports. …"],"i":[0,0],"f":[0,0],"p":[]},\
"oxc_parser":{"doc":"Recursive Descent Parser for ECMAScript and TypeScript","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11],"n":["Parser","ParserReturn","allow_return_outside_function","asi","at","at_async_no_new_line","at_function_with_async","at_start_of_ts_declaration","borrow","borrow","borrow_mut","borrow_mut","bump","bump_any","bump_remap","can_insert_semicolon","checkpoint","cur_atom","cur_kind","cur_src","cur_token","current_range","eat","eat_decorators","end_span","errors","expect","expect_jsx_attribute_value","expect_jsx_child","fmt","from","from","into","into","is_at_enum_declaration","is_at_interface_declaration","is_at_named_tuple_element","is_at_ts_declare_clause","is_at_ts_index_signature_member","is_next_at_type_member_name","is_nth_at_modifier","is_nth_at_ts_namespace_declaration","is_parenthesized_arrow_function","is_parenthesized_arrow_function_expression","lookahead","new","nth","nth_at","nth_kind","parse","parse_array_expression","parse_arrow_function_body","parse_assignment_expression","parse_assignment_expression_base","parse_binding_element","parse_binding_identifier","parse_binding_pattern","parse_block","parse_block_statement","parse_class_declaration","parse_class_element","parse_class_element_modifiers","parse_class_expression","parse_class_statement","parse_computed_property_name","parse_declaration_clause","parse_directives_and_statements","parse_export_declaration","parse_expression","parse_expression_statement","parse_formal_parameters","parse_function","parse_function_body","parse_function_declaration","parse_function_expression","parse_function_id","parse_function_impl","parse_heritage_clause","parse_identifier_expression","parse_identifier_kind","parse_identifier_name","parse_identifier_reference","parse_import_declaration","parse_import_expression","parse_jsx_expression","parse_keyword_identifier","parse_label_identifier","parse_let","parse_lhs_expression","parse_literal_bigint","parse_literal_boolean","parse_literal_expression","parse_literal_null","parse_literal_number","parse_literal_regexp","parse_literal_string","parse_method","parse_module_export_name","parse_object_expression","parse_object_pattern_property","parse_paren_expression","parse_parenthesized_arrow_function","parse_parenthesized_arrow_function_head","parse_private_identifier","parse_property_definition","parse_property_name","parse_rest_element","parse_single_param_function_expression","parse_spread_element","parse_statement_list_item","parse_switch_case","parse_template_element","parse_ts_call_signature_member","parse_ts_constructor_signature_member","parse_ts_declaration_statement","parse_ts_declare_function","parse_ts_enum_declaration","parse_ts_enum_member","parse_ts_export_assignment_declaration","parse_ts_export_namespace","parse_ts_getter_signature_member","parse_ts_global_declaration","parse_ts_global_statement","parse_ts_implements_clause","parse_ts_import_equals_declaration","parse_ts_index_signature_member","parse_ts_interface_declaration","parse_ts_namespace_or_module_declaration","parse_ts_namespace_or_module_declaration_body","parse_ts_namespace_or_module_statement","parse_ts_property_or_method_signature_member","parse_ts_qualified_name","parse_ts_return_type","parse_ts_return_type_annotation","parse_ts_setter_signature_member","parse_ts_this_parameter","parse_ts_type","parse_ts_type_alias_declaration","parse_ts_type_annotation","parse_ts_type_arguments","parse_ts_type_arguments_in_expression","parse_ts_type_assertion","parse_ts_type_parameter","parse_ts_type_parameters","parse_ts_type_signature","parse_ts_variable_annotation","parse_unary_expression_base","parse_variable_declaration","parse_variable_statement","parse_yield_expression","peek_at","peek_kind","peek_token","program","re_lex_jsx_identifier","re_lex_right_angle","re_lex_template_substitution_tail","re_lex_ts_l_angle","re_lex_ts_r_angle","read_regex","rewind","start_span","trivias","try_from","try_from","try_into","try_into","try_parse","type_id","type_id","with_context","without_context"],"q":["oxc_parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","Automatic Semicolon Insertion …","Checks if the current index has token <code>Kind</code>","","","","","","","","Advance and return true if we are at <code>Kind</code>","Advance any token","Advance and change token type, useful for changing keyword …","","","Get current atom","Get current Kind","Get current source text","Get current token","","Advance and return true if we are at <code>Kind</code>, return false …","","","","Expect a <code>Kind</code> or return error","Expect the next next token to be a <code>JsxString</code> or any other …","Expect the next next token to be a <code>JsxChild</code>, i.e. <code>&lt;</code> or <code>{</code> …","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","—————–– Enum —————— ","","","———————– declare ——————— ","Must be at <code>[ident:</code> or <code>&lt;modifiers&gt; [ident:</code>","","","","","","","","Peek nth token","Peek at nth kind","Peek nth kind","Parser main entry point Returns an empty <code>Program</code> on …","Section Array Expression …","<code>ConciseBody</code> [lookahead ≠ {] <code>ExpressionBody</code>[?In, ~Await] …","<code>AssignmentExpression</code>[In, Yield, Await] :","","<code>BindingElement</code> <code>SingleNameBinding</code> <code>BindingPattern</code> Initializer","<code>BindingIdentifier</code> : Identifier","Destructuring Binding Patterns <code>LexicalBinding</code> …","Section 14.2 Block Statement","","Section 15.7 Class Definitions","","","Section Class Definitions …","","<code>ComputedPropertyName</code>[Yield, Await] : [ <code>AssignmentExpression</code>…","","<code>https://tc39.es/ecma262/#prod-StatementList</code> <code>StatementList</code>[…","Exports <code>https://tc39.es/ecma262/#sec-exports</code>","Section Expression …","Section 14.5 Expression Statement","","","","Function Declaration","Function Expression","","","","<code>PrimaryExpression</code>: Identifier Reference","","","","Section 16.2.2 Import Declaration","Import Call <code>ImportCall</code> : import ( <code>AssignmentExpression</code> )","","Parse keyword kind as identifier","","","Section 13.3 Left-Hand-Side Expression","","","Literal Expression parses string | true | false | null | …","","","","","Section 15.4 Method Definitions <code>ClassElementName</code> ( …","","Object Expression <code>ObjectLiteral</code>[Yield, Await] : { } { …","","","Section Arrow Function …","","Section <code>https://tc39.es/ecma262/#prod-PrivateIdentifier</code> …","<code>PropertyDefinition</code>[Yield, Await]","<code>PropertyName</code>[Yield, Await] : <code>LiteralPropertyName</code> …","Section 14.3.3 Binding Rest Property","","<code>PropertyDefinition</code>[Yield, Await] : … <code>AssignmentExpression</code>…","<code>StatementListItem</code>[Yield, Await, Return] : Statement[…","","","","","","","<code>https://www.typescriptlang.org/docs/handbook/enums.html</code>","","","","","","","","","","———————  Interface  ———————— ","","","","","","","","","","","","—————–– Annotation —————– ","","","","","","","","Section 13.5 Unary Expression","","Section 14.3.2 Variable Statement","Section 15.5 Yield Expression yield yield [no …","Peek at kind","Peek next kind, returns EOF for final peek","Peek next token, returns EOF for final peek","","Tell lexer to re-read a jsx identifier","","Tell lexer to read a template substitution tail","","","Tell lexer to read a regex","","","","","","","","Errors","","","",""],"i":[0,0,1,1,1,1,1,1,1,8,1,8,1,1,1,1,1,1,1,1,1,1,1,1,1,8,1,1,1,8,1,8,1,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,1,1,1,1,1,1,1,1,8,1,8,1,8,1,1,8,1,1],"f":[0,0,[[1,2],1],[1,3],0,[1,2],[1,2],[1,2],[[]],[[]],[[]],[[]],0,[1],0,[1,2],0,[1,[[5,[4]]]],0,[1,6],0,[1,7],0,[1,3],[[1,7],7],0,0,0,0,[[8,9],10],[[]],[[]],[[]],[[]],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[[1,11,2],2],[[1,11],2],0,0,[[1,12]],[[13,6,14],1],0,0,0,[1,8],[1,[[3,[15]]]],[[1,7,[5,[[17,[16]]]],[17,[18]],[5,[19]],2],[[3,[15]]]],[1,[[3,[15]]]],[1,[[3,[15]]]],[1,[[3,[20]]]],[1,[[3,[21]]]],[1,3],[1,[[3,[[17,[22]]]]]],[1,[[3,[23]]]],[[1,2],[[3,[[17,[24]]]]]],[1,[[3,[25]]]],0,[1,[[3,[15]]]],[[1,26],[[3,[23]]]],[1,[[3,[15]]]],[1,[[3,[27]]]],[[1,2],3],[1,[[3,[23]]]],[1,[[3,[15]]]],[[1,7,15],[[3,[23]]]],[[1,28],[[3,[[17,[18]]]]]],0,[1,[[3,[[17,[30]]]]]],[[1,26],[[3,[23]]]],[[1,7,2],[[3,[15]]]],0,0,[1,3],[1,[[3,[15]]]],0,[1,[[3,[31]]]],[1,[[3,[32]]]],[1,[[3,[23]]]],[[1,7],[[3,[15]]]],[1,[[3,[15]]]],0,[1,[[3,[33]]]],[[1,26],[[3,[23]]]],[1,[[3,[15]]]],[1,[[3,[34]]]],[1,[[3,[35]]]],[1,[[3,[15]]]],[1,36],[1,[[3,[37]]]],[1,[[3,[38]]]],[1,[[3,[39]]]],[[1,2,2],[[3,[[17,[29]]]]]],[1,[[3,[40]]]],[1,[[3,[15]]]],[1,[[3,[41]]]],[1,[[3,[15]]]],[1,[[3,[15]]]],[1,3],[1,42],[1,[[3,[[17,[41]]]]]],[1,3],[1,[[3,[[17,[43]]]]]],[[1,7,2,2],[[3,[15]]]],[1,[[3,[[17,[44]]]]]],[[1,26],[[3,[23]]]],[1,[[3,[45]]]],[[1,2],46],[1,[[3,[47]]]],[1,[[3,[47]]]],[1,[[3,[23]]]],[1,[[3,[[17,[29]]]]]],[[1,2,7],[[3,[27]]]],[1,[[3,[48]]]],[1,[[3,[[17,[49]]]]]],[1,[[3,[[17,[50]]]]]],[1,[[3,[47]]]],[1,[[3,[[17,[51]]]]]],[1,[[3,[23]]]],[1,[[3,[[53,[[17,[52]]]]]]]],[[1,7,2],[[3,[27]]]],[1,[[3,[47]]]],[[1,2,7],[[3,[27]]]],[[1,2],[[3,[[17,[51]]]]]],[[1,7,2],[[3,[[17,[51]]]]]],[[1,2],[[3,[23]]]],[1,[[3,[47]]]],[1,[[3,[54]]]],[1,[[3,[55]]]],[1,[[3,[[5,[19]]]]]],[1,[[3,[47]]]],[1,3],[1,[[3,[55]]]],[[1,2,7],[[3,[27]]]],[1,[[3,[[5,[19]]]]]],[1,[[3,[[5,[[17,[56]]]]]]]],[1,[[3,[[5,[[17,[56]]]]]]]],[1,[[3,[15]]]],[1,[[3,[[17,[57]]]]]],[1,[[3,[[5,[[17,[16]]]]]]]],[1,[[3,[47]]]],[1,3],[[1,7],[[3,[15]]]],0,[[1,26],[[3,[23]]]],[1,[[3,[15]]]],0,0,0,0,[1],0,[1],[1],[1],[1],0,[1,7],0,[[],59],[[],59],[[],59],[[],59],[[1,60],3],[[],61],[[],61],[[1,62]],[[1,62]]],"p":[[3,"Parser"],[15,"bool"],[6,"Result"],[6,"Atom"],[4,"Option"],[15,"str"],[3,"Span"],[3,"ParserReturn"],[3,"Formatter"],[6,"Result"],[15,"u8"],[8,"Fn"],[3,"Allocator"],[3,"SourceType"],[4,"Expression"],[3,"TSTypeParameterDeclaration"],[3,"Box"],[3,"FormalParameters"],[3,"TSTypeAnnotation"],[3,"BindingPattern"],[3,"BindingIdentifier"],[3,"BlockStatement"],[4,"Statement"],[3,"Class"],[4,"ClassElement"],[4,"StatementContext"],[4,"Declaration"],[4,"FormalParameterKind"],[3,"Function"],[3,"FunctionBody"],[3,"IdentifierName"],[3,"IdentifierReference"],[3,"LabelIdentifier"],[3,"BigintLiteral"],[3,"BooleanLiteral"],[3,"NullLiteral"],[3,"NumberLiteral"],[3,"RegExpLiteral"],[3,"StringLiteral"],[4,"ModuleExportName"],[3,"Property"],[3,"PrivateIdentifier"],[3,"RestElement"],[3,"SpreadElement"],[3,"SwitchCase"],[3,"TemplateElement"],[4,"TSSignature"],[3,"TSEnumMember"],[3,"TSExportAssignment"],[3,"TSNamespaceExportDeclaration"],[3,"TSModuleDeclaration"],[3,"TSClassImplements"],[3,"Vec"],[4,"TSTypeName"],[4,"TSType"],[3,"TSTypeParameterInstantiation"],[3,"TSTypeParameter"],[3,"VariableDeclaration"],[4,"Result"],[8,"FnOnce"],[3,"TypeId"],[3,"Context"]]},\
"oxc_printer":{"doc":"AST Printer with whitespace minification code adapted from …","t":[13,13,3,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Comma","None","Printer","PrinterOptions","Semicolon","Separator","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","code","dedent","default","fmt","fmt","from","from","from","indent","indentation","into","into","into","last_char","minify_whitespace","new","print","print_block","print_block1","print_body","print_colon","print_comma","print_ellipsis","print_equal","print_identifier","print_indent","print_list","print_newline","print_semicolon","print_sequence","print_space","print_str","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["oxc_printer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Push a single character into the buffer","","","","","","","","","","","","","","","Push a string into the buffer","","","","","","","","","","",""],"i":[5,5,0,0,5,0,1,4,5,1,4,5,1,4,5,4,5,1,1,4,4,5,1,4,5,1,4,1,4,5,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,5,1,4,5,1,4,5,1,4,5],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[1,2],3],[4,4],[5,5],[[]],[[]],[1,6],[1],[[],4],[[4,7],8],[[5,7],8],[[]],[[]],[[]],[1],0,[[]],[[]],[[]],[1,[[10,[9]]]],0,[[11,4],1],[[1,9]],[[1,5]],[[1,12]],[[1,13]],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[1,5]],[1],[1],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15]],"p":[[3,"Printer"],[3,"Program"],[3,"String"],[3,"PrinterOptions"],[4,"Separator"],[3,"Vec"],[3,"Formatter"],[6,"Result"],[15,"u8"],[4,"Option"],[15,"usize"],[3,"BlockStatement"],[4,"Statement"],[4,"Result"],[3,"TypeId"]]},\
"oxc_semantic":{"doc":"","t":[6,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AstNode","AstNodes","Semantic","SemanticBuilder","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","default","deref","deref_mut","enter_node","fmt","fmt","from","from","from","index","index_mut","into","into","into","kind","leave_node","new","nodes","parent_kind","trivias","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["oxc_semantic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Indextree node containing a semantic node","Untyped AST nodes flattened into an indextree","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,4,1,5,4,1,5,1,5,5,5,1,1,5,4,1,5,5,5,4,1,5,5,1,1,4,5,4,4,1,5,4,1,5,4,1,5],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[1,2,3],4],[[],5],[5],[5,6],[[1,7]],[[1,8],9],[[5,8],9],[[]],[[]],[[]],[[5,10]],[[5,10],11],[[]],[[]],[[]],[[5,[12,[10]]],7],[[1,7]],[[],1],[4,5],[[5,11],7],[4,3],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14]],"p":[[3,"SemanticBuilder"],[3,"Program"],[3,"Trivias"],[3,"Semantic"],[3,"AstNodes"],[3,"Arena"],[4,"AstKind"],[3,"Formatter"],[6,"Result"],[3,"NodeId"],[6,"AstNode"],[8,"Into"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
